{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "7c175a1d-c7fe-17ca-e394-06ab0712288f" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1719590910152,
                  "endTimeMs" : 1719677310152
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "entitiesTitle" : "Entities"
            },
            "title" : "Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "deviceId" : null,
              "entityAliasId" : "17312e58-9903-dc10-d897-5bd197a00745",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.3506656507153225
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "advanced",
            "actions" : {
              "rowClick" : [ {
                "name" : "toGateway",
                "icon" : "more_vert",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "specgate",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "2e9985f4-33db-6f20-7ce3-f9a8968ad4d3"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "7c175a1d-c7fe-17ca-e394-06ab0712288f"
        },
        "dbd25480-ffe4-cd63-b32f-a9fcf21a6e21" : {
          "typeFullFqn" : "system.cards.markdown_card",
          "type" : "latest",
          "sizeX" : 5,
          "sizeY" : 3.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "848a675a-5517-9e39-5502-a565be585eab",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1719765695182,
                  "endTimeMs" : 1719852095182
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "useMarkdownTextFunction" : true,
              "markdownTextPattern" : "### Markdown/HTML card\n - **Current entity**: ${entityName}.\n - **Current value**: ${Random}.",
              "markdownTextFunction" : "\nvar token = localStorage.getItem(\"jwt_token\");\n\n// Новый запрос для списка rule chains\nvar ruleChainXhr = new XMLHttpRequest();\nvar ruleChainUrl = \"https://iot000.sonmar.com.ua/api/ruleChains?pageSize=100&page=0&sortProperty=createdTime&sortOrder=DESC&type=CORE\";\n\nruleChainXhr.open(\"GET\", ruleChainUrl, false);\nruleChainXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\nruleChainXhr.send();\n\nvar ruleChainListHTML = '';\nif (ruleChainXhr.status === 200) {\n    var ruleChainResponse = JSON.parse(ruleChainXhr.responseText);\n    var ruleChains = ruleChainResponse.data;\n\n    if (!ruleChains || ruleChains.length === 0) {\n        ruleChainListHTML = '<p>No rule chains available</p>';\n    } else {\n        ruleChainListHTML = '<input style=\"margin-bottom: 10px; padding: 10px; width: calc(100% - 20px); box-sizing: border-box;\" list=\"ruleChainDropdown\" id=\"ruleChainSearch\" placeholder=\"Search rule chains\" onchange=\"handleCellClick()\"><datalist id=\"ruleChainDropdown\">';\n        ruleChains.forEach(ruleChain => {\n            if (ruleChain.name.toLowerCase().endsWith(\"config\")) {\n                var displayName = ruleChain.name.replace(/config$/i, '').trim();\n                ruleChainListHTML += `<option value=\"${displayName}\" data-id=\"${ruleChain.id.id}\">${displayName}</option>`;\n            }\n        });\n        ruleChainListHTML += '</datalist>';\n    }\n} else {\n    ruleChainListHTML = \"<p>Error fetching rule chain list.</p>\";\n}\n\n// Запрос списка устройств\nvar deviceXhr = new XMLHttpRequest();\nvar deviceUrl = \"https://iot000.sonmar.com.ua/api/deviceInfos/all?pageSize=1000&page=0&sortProperty=createdTime&sortOrder=DESC&includeCustomers=true\";\n\ndeviceXhr.open(\"GET\", deviceUrl, false);\ndeviceXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\ndeviceXhr.send();\n\nvar deviceListHTML = '';\nif (deviceXhr.status === 200) {\n    var deviceResponse = JSON.parse(deviceXhr.responseText);\n    var devices = deviceResponse.data;\n\n    if (!devices || devices.length === 0) {\n        deviceListHTML = '<p>No devices available</p>';\n    } else {\n        deviceListHTML = '<input style=\"margin-bottom: 10px; padding: 10px; width: calc(100% - 20px); box-sizing: border-box;\" list=\"deviceDropdown\" id=\"deviceSearch\" placeholder=\"Search devices(double click)\"><datalist id=\"deviceDropdown\">';\n        devices.forEach(device => {\n            deviceListHTML += `<option value=\"${device.name}\">${device.name} (${device.type})</option>`;\n        });\n        deviceListHTML += '</datalist><button id=\"deleteDeviceButton\" style=\"background-color: #007BFF; color: white; border: none; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 4px; transition: background-color 0.3s;\">Delete Selected Device</button>';\n    }\n} else {\n    deviceListHTML = \"<p>Error fetching device list.</p>\";\n}\n\n// Запрос для получения mainConfig и заполнения выпадающих списков\nvar configXhr = new XMLHttpRequest();\nvar configUrl = \"https://iot000.sonmar.com.ua/api/plugins/telemetry/DEVICE/e15f7220-2f07-11ef-849b-699b159d4945/values/attributes/CLIENT_SCOPE\";\n\nconfigXhr.open(\"GET\", configUrl, false);\nconfigXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\nconfigXhr.send();\nvar connectionOptions = \"\";\n\nvar selectedValues = {};\n// Выполняем запрос и заполняем connectionOptions и selectedValues\nif (configXhr.status === 200) {\n    var configResponse = JSON.parse(configXhr.responseText);\n    var mainConfig = configResponse.find(item => item.key === \"mainConfig\");\n\n    if (mainConfig) {\n        var configData = mainConfig.value;\n\n        // Проходим по каждому элементу и создаем опции для выпадающих списков\n        var uniqueIds = new Set();\n        configData.forEach(configItem => {\n            if (!uniqueIds.has(configItem.id)) {\n                connectionOptions += `<option value=\"${configItem.id}\">${configItem.id}</option>`;\n                uniqueIds.add(configItem.id);\n            }\n\n            // Сохраняем выбранные значения для соответствующих элементов\n            var titleLower = configItem.title.toLowerCase();\n            const categories = ['plc', 'pump1', 'pump2', 'pump3', 'pump4', 'pump5', 'pump6'];\n            categories.forEach(category => {\n                if (titleLower.includes(category)) {\n                    selectedValues[category] = configItem.id;\n                }\n            });\n        });\n    }\n}\n\nlet allTablesHTML = ruleChainListHTML + deviceListHTML;\nallTablesHTML = '<div id=\"content\" style=\"font-family: Arial, sans-serif; background-color: #f4f4f9; margin: 0; padding: 0; display: flex; flex-direction: column; align-items: center; justify-content: flex-start; height: 100vh;\">' + allTablesHTML + '</div>';\n\nwindow.handleCellClick = function() {\n    var selectedRuleChain = document.querySelector('#ruleChainSearch').value;\n    var selectedOption = Array.from(document.querySelectorAll('#ruleChainDropdown option')).find(option => option.value === selectedRuleChain);\n\n    if (selectedOption) {\n        // Устанавливаем выбранные значения\n        Object.keys(selectedValues).forEach(category => {\n            var selectElement = document.getElementById(category);\n            if (selectElement) {\n                selectElement.value = selectedValues[category];\n            }\n        });\n\n        var staticTableHTML = `\n            <h3>Static Table</h3>\n            <table id=\"staticTable\" style=\"border-collapse: collapse; width: 80%; margin: 20px auto; background-color: #fff; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\" border=\"1\">\n                <tr>\n                    <th style=\"background-color: #007BFF; color: white; font-weight: bold; padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">Category</th>\n                    <th style=\"background-color: #007BFF; color: white; font-weight: bold; padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">Prefix</th>\n                    <th style=\"background-color: #007BFF; color: white; font-weight: bold; padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">Connection ID</th>\n                </tr>\n                <tr>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">plc</td>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">❌</td>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">\n                        <select id=\"plc\" onchange=\"updateFields(event)\" style=\"padding: 8px; border: 1px solid #ccc; border-radius: 4px; width: 100%; box-sizing: border-box;\">\n                            ${connectionOptions.replace(`value=\"${selectedValues['plc']}\"`, `value=\"${selectedValues['plc']}\" selected`)}\n                        </select>\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">pump1</td>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">✔️</td>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">\n                        <select id=\"pump1\" onchange=\"updateFields(event)\" style=\"padding: 8px; border: 1px solid #ccc; border-radius: 4px; width: 100%; box-sizing: border-box;\">\n                            ${connectionOptions.replace(`value=\"${selectedValues['pump1']}\"`, `value=\"${selectedValues['pump1']}\" selected`)}\n                        </select>\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">pump2</td>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">✔️</td>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">\n                        <select id=\"pump2\" onchange=\"updateFields(event)\" style=\"padding: 8px; border: 1px solid #ccc; border-radius: 4px; width: 100%; box-sizing: border-box;\">\n                            ${connectionOptions.replace(`value=\"${selectedValues['pump2']}\"`, `value=\"${selectedValues['pump2']}\" selected`)}\n                        </select>\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">pump3</td>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">✔️</td>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">\n                        <select id=\"pump3\" onchange=\"updateFields(event)\" style=\"padding: 8px; border: 1px solid #ccc; border-radius: 4px; width: 100%; box-sizing: border-box;\">\n                            ${connectionOptions.replace(`value=\"${selectedValues['pump3']}\"`, `value=\"${selectedValues['pump3']}\" selected`)}\n                        </select>\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">pump4</td>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">✔️</td>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">\n                        <select id=\"pump4\" onchange=\"updateFields(event)\" style=\"padding: 8px; border: 1px solid #ccc; border-radius: 4px; width: 100%; box-sizing: border-box;\">\n                            ${connectionOptions.replace(`value=\"${selectedValues['pump4']}\"`, `value=\"${selectedValues['pump4']}\" selected`)}\n                        </select>\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">pump5</td>\n                    <td style=\"padding: 12px 15px; border: 1px солид #ddd; text-align: left;\">✔️</td>\n                    <td style=\"padding: 12px 15px; border: 1px солид #ddd; text-align: left;\">\n                        <select id=\"pump5\" onchange=\"updateFields(event)\" style=\"padding: 8px; border: 1px солид #ccc; border-radius: 4px; width: 100%; box-sizing: border-box;\">\n                            ${connectionOptions.replace(`value=\"${selectedValues['pump5']}\"`, `value=\"${selectedValues['pump5']}\" selected`)}\n                        </select>\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"padding: 12px 15px; border: 1px солид #ddd; text-align: left;\">pump6</td>\n                    <td style=\"padding: 12px 15px; border: 1px солид #ddd; text-align: left;\">✔️</td>\n                    <td style=\"padding: 12px 15px; border: 1px солид #ddd; text-align: left;\">\n                        <select id=\"pump6\" onchange=\"updateFields(event)\" style=\"padding: 8px; border: 1px солид #ccc; border-radius: 4px; width: 100%; box-sizing: border-box;\">\n                            ${connectionOptions.replace(`value=\"${selectedValues['pump6']}\"`, `value=\"${selectedValues['pump6']}\" selected`)}\n                        </select>\n                    </td>\n                </tr>\n            </table>\n        `;\n\n        var selectedId = selectedOption.getAttribute('data-id');\n        var newUrl = \"https://iot000.sonmar.com.ua/api/plugins/telemetry/RULE_CHAIN/\" + selectedId + \"/values/attributes/SERVER_SCOPE\";\n\n        var newXhr = new XMLHttpRequest();\n        newXhr.open(\"GET\", newUrl, false);\n        newXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n        newXhr.send();\n\nif (newXhr.status === 200) {\n    var newResponse = JSON.parse(newXhr.responseText);\n    var newConfigs = newResponse.filter(item => item.key.includes(\"config\"));\n\n    var updatedHTML = '';\n\n    newConfigs.forEach((config, configIndex) => {\n        console.log(\"config\")\n        console.log(config)\n        if (config.key === \"config\") {\n            return; // Пропустить элементы с ключом \"config\"\n        }\n\n        try {\n            let configData = JSON.parse(config.value.replace(/'/g, '\"'));\n\n            let tableHTML = `<h3>${config.key}</h3><table style=\"border-collapse: collapse; width: 80%; margin: 20px auto; background-color: #fff; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\" border=\"1\"><tr><th style=\"background-color: #007BFF; color: white; font-weight: bold; padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">Category</th><th style=\"background-color: #007BFF; color: white; font-weight: bold; padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">Values</th></tr>`;\n            \n            for (const [category, values] of Object.entries(configData)) {\n                if (category === \"config\") {\n                    continue; // Пропустить элементы с категорией \"config\"\n                }\n                let valuesHTML = '';\n                if (Array.isArray(values)) {\n                    valuesHTML += '<details style=\"margin: 10px 0;\"><summary style=\"cursor: pointer; font-weight: bold;\">Values</summary>';\n                    values.forEach((value, index) => {\n                        let inputId = `${config.key}_${category}_${value}`;\n                        valuesHTML += `<div>${value}: <input type=\"text\" id=\"${inputId}\" style=\"padding: 8px; margin: 5px 0; box-sizing: border-box; border: 1px solid #ccc; border-radius: 4px; width: calc(100% - 18px);\" /></div>`;\n                    });\n                    valuesHTML += '</details>';\n                } else {\n                    let inputId = `${config.key}_${category}_${values}`;\n                    valuesHTML += `<div>${values}: <input type=\"text\" id=\"${inputId}\" style=\"padding: 8px; margin: 5px 0; box-sizing: border-box; border: 1px solid #ccc; border-radius: 4px; width: calc(100% - 18px);\" /></div>`;\n                }\n                tableHTML += `<tr style=\"background-color: ${configIndex % 2 === 0 ? '#f9f9f9' : '#fff'};\"><td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">${category}</td><td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">${valuesHTML}</td></tr>`;\n            }\n            \n            tableHTML += '</table>';\n            updatedHTML += tableHTML;\n        } catch (error) {\n            console.error('Skipping invalid JSON:', config.value);\n        }\n    });\n\n            updatedHTML += `\n                <div class=\"button-container\" style=\"display: flex; justify-content: center; width: 100%; margin-top: 20px;\">\n                    <button id=\"actionButton\" style=\"background-color: #007BFF; color: white; border: none; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 4px; transition: background-color 0.3s;\">Confirm</button>\n                    <button id=\"clearInputsButton\" style=\"background-color: #007BFF; color: white; border: none; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 4px; transition: background-color 0.3s;\">Clear All Inputs</button>\n                </div>`;\n\n            document.getElementById('content').innerHTML = ruleChainListHTML + deviceListHTML + staticTableHTML + updatedHTML;\n\n            // Заполняем поля для всех select элементов\n            Object.keys(selectedValues).forEach(category => {\n                updateFields({ target: document.getElementById(category) });\n            });\n        } else {\n            document.getElementById('content').innerHTML = ruleChainListHTML + deviceListHTML + staticTableHTML + \"Error fetching telemetry data.\";\n        }\n    }\n}\n\n// Новая функция для обновления полей при изменении выбора\nwindow.updateFields = function(event) {\n    var selectElement = event.target;\n    var category = selectElement.id;\n    var selectedId = selectElement.value;\n    var configItem = configData.find(item => item.id === selectedId);\n\n\n\n    if (configItem) {\n        configItem.registers.forEach(register => {\n            var inputId = `config_telemetry_${category}_${register.key}`;\n \n            var inputElement = document.getElementById(inputId);\n            if (inputElement) {\n                inputElement.value = register.register_id;\n            }\n        });\n    }\n}\n\nreturn allTablesHTML;\n",
              "applyDefaultMarkdownStyle" : true,
              "markdownCss" : "/* Стили */\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f9;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    flex-direction: column; /* Для вертикального центрирования содержимого */\n}\n\ntable {\n    border-collapse: collapse;\n    width: 80%;\n    margin: 20px auto;\n    background-color: #fff;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nth, td {\n    padding: 12px 15px;\n    border: 1px solid #ddd;\n    text-align: left;\n}\n\nth {\n    background-color: #007BFF;\n    color: white;\n    font-weight: bold;\n}\n\ntr:nth-child(even) {\n    background-color: #f9f9f9;\n}\n\ntr:hover {\n    background-color: #f1f1f1;\n}\n\ntd {\n    color: #333;\n}\n\ndetails {\n    margin: 10px 0;\n}\n\nsummary {\n    cursor: pointer;\n    font-weight: bold;\n}\n\ndetails[open] summary {\n    color: #007BFF;\n}\n\ninput[type=\"text\"] {\n    padding: 8px;\n    margin: 5px 0;\n    box-sizing: border-box;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    width: calc(100% - 18px);\n}\n\nbutton {\n    background-color: #007BFF;\n    color: white;\n    border: none;\n    padding: 10px 20px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    cursor: pointer;\n    border-radius: 4px;\n    transition: background-color 0.3s;\n}\n\nbutton:hover {\n    background-color: #0056b3;\n}\n\n.config-button {\n    margin-left: 10px;\n}\n\n.button-container {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    margin-top: 20px;\n}\n\n/* Поиск устройств */\n#deviceContainer {\n    position: relative;\n    width: 100%;\n}\n\n#deviceSearch,#ruleChainSearch {\n    margin-bottom: 10px;\n    padding: 10px;\n    width: calc(100% - 20px);\n    box-sizing: border-box;\n}\n\n\n#deviceList {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    right: 0;\n    max-height: 200px;\n    overflow-y: auto;\n    border: 1px solid #ddd;\n    background-color: #fff;\n    z-index: 1000;\n    list-style-type: none;\n    padding: 0;\n    margin: 0;\n}\n\n#deviceList li {\n    padding: 10px;\n    border-bottom: 1px solid #ddd;\n    cursor: pointer;\n}\n\n#deviceList li:hover {\n    background-color: #f1f1f1;\n}"
            },
            "title" : "Markdown/HTML Card",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ {
                "name" : "actionButton",
                "icon" : "search",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\n    let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\n    // Найти все элементы input на странице\n    const inputs = document.querySelectorAll('input[type=\"text\"]');\n    const values = {};\n    let allInputsValid = true; // флаг для проверки валидности всех input\n    let atLeastOneFilled = false; // флаг для проверки, что хотя бы одно поле заполнено\n\n    // Запрещенные символы для проверки на SQL инъекцию\n    const forbiddenCharacters = /['\"\\\\;%<>]/;\n\n    // Считать значения всех input и сохранить их в объекте\n    inputs.forEach(input => {\n        const value = input.value;\n        if (value && forbiddenCharacters.test(value)) {\n            showNotification('Input contains forbidden characters.');\n            allInputsValid = false;\n            return;\n        }\n        if (value) {\n            atLeastOneFilled = true;\n        }\n        values[input.id] = value;\n    });\n\n    // Если найдены невалидные input или ни одно поле не заполнено, прекратить выполнение\n    if (!allInputsValid) {\n        return;\n    }\n\n    if (!atLeastOneFilled) {\n        showNotification('Please fill in at least one field.');\n        return;\n    }\n\n    // Получить имя устройства из deviceSearch по id\n    const deviceSearchElement = document.getElementById('deviceSearch');\n    let deviceName = deviceSearchElement ? deviceSearchElement.value : '';\n    if (!deviceName) {\n        showNotification('Please enter a device name.');\n        return;\n    }\n\n    // Собрать конфигурацию\n    const config = {\n        attributes: {\n            pump: [],\n            plc: []\n        },\n        telemetry: {\n            registers: []\n        }\n    };\n\n    Object.keys(values).forEach(key => {\n        if (values[key]) {  // Проверяем, что значение не пустое\n            const parts = key.split('_');\n            const configType = parts[1]; // attributes или telemetry\n            const attributeName = parts.slice(3).join('_'); // объединить оставшиеся части для получения атрибута\n\n            if (configType === 'attributes') {\n                const deviceType = parts[2]; // pump или plc\n                if (deviceType === 'pump') {\n                    config.attributes.pump.push({\n                        key: attributeName, // используем атрибут устройства в качестве ключа\n                        value: values[key]\n                    });\n                } else if (deviceType === 'plc') {\n                    config.attributes.plc.push({\n                        key: attributeName, // используем атрибут устройства в качестве ключа\n                        value: values[key]\n                    });\n                }\n            } else if (configType === 'telemetry') {\n                config.telemetry.registers.push({\n                    key: attributeName, // используем атрибут устройства в качестве ключа\n                    value: values[key]\n                });\n            }\n        }\n    });\n\n    const finalConfig = {};\n    finalConfig[deviceName] = config;\n\n    console.log('Final Config:', finalConfig);\n\n    // Получить существующий configFromTB\n    attributeService.getEntityAttributes({ entityType: 'DEVICE', id: entityId.id }, 'SHARED_SCOPE', ['configFromTB'])\n        .subscribe(\n            response => {\n                const configFromTB = response.find(item => item.key === 'configFromTB');\n                let mergedConfig = {};\n\n                if (configFromTB) {\n                    // Parse existing configFromTB if it exists\n                    mergedConfig = JSON.parse(configFromTB.value);\n                    if (mergedConfig[deviceName]) {\n                        // Если deviceName существует, заменяем его конфигурацию\n                        mergedConfig[deviceName] = finalConfig[deviceName];\n                    } else {\n                        // Если deviceName не существует, добавляем его к конфигурации\n                        mergedConfig[deviceName] = finalConfig[deviceName];\n                    }\n                } else {\n                    // Если configFromTB не существует, создаем новый конфиг\n                    mergedConfig = finalConfig;\n                }\n\n                // Сделать запрос для получения mainConfig\n                attributeService.getEntityAttributes({ entityType: 'DEVICE', id: entityId.id }, 'CLIENT_SCOPE', ['mainConfig'])\n                    .subscribe(\n                        response => {\n                            const mainConfig = response.find(item => item.key === 'mainConfig');\n                            if (mainConfig && Array.isArray(mainConfig.value)) {\n                                const mainConfigValue = mainConfig.value;\n\n                                // Добавить данные из mainConfig в финальную конфигурацию\n                                mainConfigValue.forEach(deviceConfig => {\n                                    deviceConfig.registers.forEach(register => {\n                                        mergedConfig[deviceName].telemetry.registers.forEach(item => {\n                                            if (item.key === register.key) {\n                                                item.register_id = register.register_id;\n                                            }\n                                        });\n                                    });\n                                });\n\n                                console.log('Updated Final Config:', mergedConfig);\n\n                                const attributes = [\n                                    {\n                                        key: 'configFromTB',\n                                        value: JSON.stringify(mergedConfig)\n                                    }\n                                ];\n\n                                attributeService.saveEntityAttributes(\n                                    { entityType: 'DEVICE', id: entityId.id },\n                                    'SHARED_SCOPE',\n                                    attributes\n                                ).subscribe(\n                                    response => {\n                                        console.log('Attributes saved successfully', response);\n                                        showNotification('Configuration has been updated');\n                                    },\n                                    error => {\n                                        console.error('Error saving attributes', error);\n                                        showNotification('Error saving attributes');\n                                    }\n                                );\n                            } else {\n                                console.error('mainConfig not found or not an array');\n                                showNotification('mainConfig not found or not an array');\n                            }\n                        },\n                        error => {\n                            console.error('Error fetching mainConfig', error);\n                            showNotification('Error fetching mainConfig');\n                        }\n                    );\n            },\n            error => {\n                console.error('Error fetching configFromTB', error);\n                showNotification('Error fetching configFromTB');\n            }\n        );\n\n    // Функция для проверки, является ли строка положительным числом\n    function isPositiveNumber(value) {\n        const number = parseFloat(value);\n        return !isNaN(number) && number > 0;\n    }\n\n    // Функция для отображения уведомления\n    function showNotification(message) {\n        const notification = document.createElement('div');\n        notification.style.position = 'fixed';\n        notification.style.top = '50%';\n        notification.style.left = '50%';\n        notification.style.transform = 'translate(-50%, -50%)';\n        notification.style.padding = '20px';\n        notification.style.backgroundColor = '#4caf50';\n        notification.style.color = '#fff';\n        notification.style.fontSize = '18px';\n        notification.style.borderRadius = '8px';\n        notification.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';\n        notification.style.zIndex = '1000';\n        notification.textContent = message;\n\n        document.body.appendChild(notification);\n\n        setTimeout(() => {\n            document.body.removeChild(notification);\n        }, 3000);\n    }",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "b2a1cd76-c4e6-2624-88d1-08f6e2ce66ff"
              }, {
                "name" : "deviceSearch",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "\n    // Получите значение введенное в текстовом поле\n    var searchValue = this.value.toUpperCase();\n\n    // Получите элемент select (ваш выпадающий список)\n    var select = document.getElementById('deviceDropdown');\n\n    // Получите все опции в списке\n    var options = select.getElementsByTagName('option');\n\n    // Переберите опции и скройте те, которые не соответствуют поисковому значению\n    var found = false; // Флаг для отслеживания наличия совпадений\n    for (var i = 0; i < options.length; i++) {\n        var option = options[i];\n        var txtValue = option.textContent || option.innerText;\n        if (searchValue === '' || txtValue.toUpperCase().indexOf(searchValue) > -1) {\n            option.style.display = '';\n            found = true; // Есть совпадение\n        } else {\n            option.style.display = 'none';\n        }\n    }\n\n    // Если не найдено совпадений, сбросьте выбор\n    if (!found) {\n        select.selectedIndex = -1;\n    }\n\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "5e327408-2f13-64d6-a438-a3c5e58280a6"
              }, {
                "name" : "config_attributes_category_button",
                "icon" : "search",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : " let $injector = widgetContext.$scope.$injector;\n        let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\n        // Функция для получения конфигурации устройства по id\n        function getConfig(deviceId) {\n            return new Promise((resolve, reject) => {\n                let xhr = new XMLHttpRequest();\n                let url = `https://iot000.sonmar.com.ua/api/plugins/telemetry/DEVICE/${deviceId}/values/attributes/CLIENT_SCOPE`;\n                let token = localStorage.getItem(\"jwt_token\");\n\n                xhr.open(\"GET\", url, true);\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n                xhr.onreadystatechange = function () {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status === 200) {\n                            try {\n                                let response = JSON.parse(xhr.responseText);\n                                resolve(response);\n                            } catch (e) {\n                                console.error(\"Invalid JSON response:\", xhr.responseText);\n                                reject(\"Error parsing JSON response.\");\n                            }\n                        } else {\n                            reject(\"Error fetching device config.\");\n                        }\n                    }\n                };\n                xhr.send();\n            });\n        }\n\n        // Функция для обработки клика по кнопке\n        async function handleButtonClick(event) {\n            const button = event.target;\n            const input = button.previousElementSibling;\n            const deviceSearchInput = document.getElementById('deviceSearch');\n            const deviceName = deviceSearchInput ? deviceSearchInput.value : '';\n            \n            if (input && input.id.includes('config')) {\n                console.log(\"config\")\n                let configId = input.value;\n                try {\n                    let configData = await getConfig('e15f7220-2f07-11ef-849b-699b159d4945'); // используем id устройства\n                    let mainConfig = configData.find(item => item.key === 'mainConfig');\n                    \n                    if (mainConfig) {\n                        let configValue = mainConfig.value;\n                        if (typeof configValue === 'string') {\n                            try {\n                                configValue = JSON.parse(configValue);\n                            } catch (e) {\n                                console.error(\"Invalid JSON in mainConfig value:\", mainConfig.value);\n                                return;\n                            }\n                        }\n\n                        let config = configValue.find(c => c.id === configId);\n                        if (config) {\n                            config.registers.forEach(register => {\n                                // Найти все input элементы, id которых начинается с \"config_attributes\" и содержит register.key\n                                let regInputElements = document.querySelectorAll(`input[id^=\"config_attributes\"][id*=\"${register.key}\"]`);\n                                regInputElements.forEach(regInput => {\n                                    regInput.value = register.key;\n                                    console.log(`Setting value for input with key ${register.key}`);\n                                });\n                            });\n                        } else {\n                            console.warn(`Config not found for id: ${configId}`);\n                        }\n                    } else {\n                        console.warn('mainConfig not found in device config data');\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\nhandleButtonClick($event);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "6db3bea2-c770-27ab-a056-203cbabee487"
              }, {
                "name" : "config_telemetry_category_button",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\n        let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\n        // Функция для получения конфигурации устройства по id\n        function getConfig(deviceId) {\n            return new Promise((resolve, reject) => {\n                let xhr = new XMLHttpRequest();\n                let url = `https://iot000.sonmar.com.ua/api/plugins/telemetry/DEVICE/${deviceId}/values/attributes/CLIENT_SCOPE`;\n                let token = localStorage.getItem(\"jwt_token\");\n\n                xhr.open(\"GET\", url, true);\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n                xhr.onreadystatechange = function () {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status === 200) {\n                            try {\n                                let response = JSON.parse(xhr.responseText);\n                                resolve(response);\n                            } catch (e) {\n                                console.error(\"Invalid JSON response:\", xhr.responseText);\n                                reject(\"Error parsing JSON response.\");\n                            }\n                        } else {\n                            reject(\"Error fetching device config.\");\n                        }\n                    }\n                };\n                xhr.send();\n            });\n        }\n\n        // Функция для обработки клика по кнопке\n        async function handleButtonClick(event) {\n            const button = event.target;\n            const input = button.previousElementSibling;\n            const deviceSearchInput = document.getElementById('deviceSearch');\n            const deviceName = deviceSearchInput ? deviceSearchInput.value : '';\n            \n            if (input && input.id.includes('config')) {\n                console.log(\"config\")\n                let configId = input.value;\n                try {\n                    let configData = await getConfig('e15f7220-2f07-11ef-849b-699b159d4945'); // используем id устройства\n                    let mainConfig = configData.find(item => item.key === 'mainConfig');\n                    \n                    if (mainConfig) {\n                        let configValue = mainConfig.value;\n                        if (typeof configValue === 'string') {\n                            try {\n                                configValue = JSON.parse(configValue);\n                            } catch (e) {\n                                console.error(\"Invalid JSON in mainConfig value:\", mainConfig.value);\n                                return;\n                            }\n                        }\n\n                        let config = configValue.find(c => c.id === configId);\n                        if (config) {\n                            config.registers.forEach(register => {\n                                // Найти все input элементы, id которых начинается с \"config_attributes\" и содержит register.key\n                                let regInputElements = document.querySelectorAll(`input[id^=\"config_telemetry\"][id*=\"${register.key}\"]`);\n                                regInputElements.forEach(regInput => {\n                                    regInput.value = register.key;\n                                    console.log(`Setting value for input with key ${register.key}`);\n                                });\n                            });\n                        } else {\n                            console.warn(`Config not found for id: ${configId}`);\n                        }\n                    } else {\n                        console.warn('mainConfig not found in device config data');\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\nhandleButtonClick($event);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "936b1953-24d2-56ed-277e-4d9938205ac5"
              }, {
                "name" : "clearInputsButton",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "const inputs = document.querySelectorAll('input[type=\"text\"]');\ninputs.forEach(input => {\n    if (input.id !== 'rateInput') {\n        input.value = '';\n    }\n});\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "7efbeb18-f3ba-f8b1-f3ec-e7e0c313e053"
              }, {
                "name" : "deleteDeviceButton",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "    let $injector = widgetContext.$scope.$injector;\n    let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\n    // Получить значение deviceSearch\n    const deviceSearchElement = document.getElementById('deviceSearch');\n    let deviceName = deviceSearchElement ? deviceSearchElement.value : '';\n    if (!deviceName) {\n        showNotification('Please enter a device name.');\n        return;\n    }\n\n    // Получить существующий configFromTB\n    attributeService.getEntityAttributes({ entityType: 'DEVICE', id: entityId.id }, 'SHARED_SCOPE', ['configFromTB'])\n        .subscribe(\n            response => {\n                const configFromTB = response.find(item => item.key === 'configFromTB');\n                if (!configFromTB) {\n                    showNotification('Config not found.');\n                    return;\n                }\n\n                let mergedConfig = JSON.parse(configFromTB.value);\n\n                // Проверить, существует ли устройство с данным именем\n                if (!mergedConfig[deviceName]) {\n                    showNotification(`Device \"${deviceName}\" not found in the configuration.`);\n                    return;\n                }\n\n                // Удалить устройство из конфигурации\n                delete mergedConfig[deviceName];\n\n                // Сохранить обновленную конфигурацию\n                const attributes = [\n                    {\n                        key: 'configFromTB',\n                        value: JSON.stringify(mergedConfig)\n                    }\n                ];\n\n                attributeService.saveEntityAttributes(\n                    { entityType: 'DEVICE', id: entityId.id },\n                    'SHARED_SCOPE',\n                    attributes\n                ).subscribe(\n                    response => {\n                        console.log('Attributes saved successfully', response);\n                        showNotification(`Device \"${deviceName}\" has been deleted successfully.`);\n                    },\n                    error => {\n                        console.error('Error saving attributes', error);\n                        showNotification('Error saving attributes.');\n                    }\n                );\n            },\n            error => {\n                console.error('Error fetching configFromTB', error);\n                showNotification('Error fetching configFromTB.');\n            }\n        );\n\n    // Функция для отображения уведомления\n    function showNotification(message) {\n        const notification = document.createElement('div');\n        notification.style.position = 'fixed';\n        notification.style.top = '50%';\n        notification.style.left = '50%';\n        notification.style.transform = 'translate(-50%, -50%)';\n        notification.style.padding = '20px';\n        notification.style.backgroundColor = '#4caf50';\n        notification.style.color = '#fff';\n        notification.style.fontSize = '18px';\n        notification.style.borderRadius = '8px';\n        notification.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';\n        notification.style.zIndex = '1000';\n        notification.textContent = message;\n\n        document.body.appendChild(notification);\n\n        setTimeout(() => {\n            document.body.removeChild(notification);\n        }, 3000);\n    }\n\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "4b5c5134-2ea2-0762-631e-747cbc65dc83"
              } ]
            },
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1049,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "dbd25480-ffe4-cd63-b32f-a9fcf21a6e21"
        },
        "389bc668-e344-51eb-65b2-6cea475d08f8" : {
          "typeFullFqn" : "system.cards.markdown_card",
          "type" : "latest",
          "sizeX" : 5,
          "sizeY" : 3.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "848a675a-5517-9e39-5502-a565be585eab",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1719591017735,
                  "endTimeMs" : 1719677417735
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "useMarkdownTextFunction" : true,
              "markdownTextPattern" : "### Markdown/HTML card\n - **Current entity**: ${entityName}.\n - **Current value**: ${Random}.",
              "markdownTextFunction" : "var xhr = new XMLHttpRequest();\n    var entityId = data[0].entityId;\n    var url = `https://iot000.sonmar.com.ua/api/plugins/telemetry/DEVICE/${entityId}/values/attributes/CLIENT_SCOPE`;\n    var token = localStorage.getItem(\"jwt_token\");\n\n    xhr.open(\"GET\", url, false);\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    xhr.send();\n\n    if (xhr.status === 200) {\n        var response = JSON.parse(xhr.responseText);\n\n        // Проверка на наличие данных\n        if (!response || response.length === 0) {\n            return 'No data available';\n        }\n\n        // Парсинг данных и построение таблицы\n        let tableHTML = '<table border=\"1\"><tr><th>Title</th><th>ID</th><th>Registers</th><th>Description</th></tr>';\n        \n        response[0].value.forEach(item => {\n            let registersHTML = '<details><summary>Registers</summary>';\n            registersHTML += item.registers.map(register => `<div>${register.register_address}: ${register.key}: ${register.register_id}</div>`).join('');\n            registersHTML += '</details>';\n            \n            tableHTML += `<tr>\n                            <td>${item.title}</td>\n                            <td>${item.id}</td>\n                            <td>${registersHTML}</td>\n                            <td>${item.description}</td>\n                          </tr>`;\n        });\n        \n        tableHTML += '</table>';\n        \n        return tableHTML;\n    } else {\n        return \"Error fetching telemetry data.\";\n    }",
              "applyDefaultMarkdownStyle" : true,
              "markdownCss" : "/* Общие стили для страницы */\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f9;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n}\n\n/* Стили для таблицы */\ntable {\n    border-collapse: collapse;\n    width: 80%;\n    margin: 20px auto;\n    background-color: #fff;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nth, td {\n    padding: 12px 15px;\n    border: 1px solid #ddd;\n    text-align: left;\n}\n\nth {\n    background-color: #007BFF;\n    color: white;\n    font-weight: bold;\n}\n\ntr:nth-child(even) {\n    background-color: #f9f9f9;\n}\n\ntr:hover {\n    background-color: #f1f1f1;\n}\n\ntd {\n    color: #333;\n}\n\n/* Стили для элементов details и summary */\ndetails {\n    margin: 10px 0;\n}\n\nsummary {\n    cursor: pointer;\n    font-weight: bold;\n}\n\ndetails[open] summary {\n    color: #007BFF;\n}\n"
            },
            "title" : "Markdown/HTML Card",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "389bc668-e344-51eb-65b2-6cea475d08f8"
        },
        "23568f66-1d74-3497-8195-16acbfcb0092" : {
          "typeFullFqn" : "system.cards.markdown_card",
          "type" : "latest",
          "sizeX" : 5,
          "sizeY" : 3.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "848a675a-5517-9e39-5502-a565be585eab",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1721219553836,
                  "endTimeMs" : 1721305953836
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "useMarkdownTextFunction" : true,
              "markdownTextPattern" : "### Markdown/HTML card\n - **Current entity**: ${entityName}.\n - **Current value**: ${Random}.",
              "markdownTextFunction" : "// Make sure the input element gets the value of telemetry_rate_sec when the page is rendered\n    console.log(data[0].entityId)\n    console.log(\"\")\n    const entityId = data[0].entityId;\n    const attributeService = ctx.$scope.$injector.get(ctx.servicesMap.get('attributeService'));\n\n    // Get telemetry_rate_sec value\n    attributeService.getEntityAttributes({ entityType: 'DEVICE', id: entityId }, 'SHARED_SCOPE', ['telemetry_rate_sec'])\n        .subscribe(\n            response => {\n                const telemetryRateSec = response.find(item => item.key === 'telemetry_rate_sec');\n                const rateValue = telemetryRateSec ? telemetryRateSec.value : '';\n                document.getElementById('rateInput').value = rateValue;\n            },\n            error => {\n                console.error('Error fetching telemetry_rate_sec', error);\n            }\n        );\n\n    // Return the HTML content\n    return `\n        <div style=\"margin: 20px;\">\n            <label for=\"rateInput\">Rate (sec):</label>\n            <input type=\"text\" id=\"rateInput\" name=\"rateInput\" style=\"margin-left: 10px; padding: 5px; border-radius: 4px; border: 1px solid #ccc;\">\n            <button id=\"submitButton\" style=\"margin-left: 10px; padding: 5px 10px; border-radius: 4px; border: 1px solid #007BFF; background-color: #007BFF; color: #fff; cursor: pointer;\">\n                Submit\n            </button>\n            <label id=\"rateLabel\" style=\"margin-left: 20px;\">ratesec</label>\n        </div>\n    \n    `;",
              "applyDefaultMarkdownStyle" : true,
              "markdownCss" : ""
            },
            "title" : "Markdown/HTML Card",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "actions" : {
              "elementClick" : [ {
                "name" : "submitButton",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\n    let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\n    // Получить значение из Input\n    const rateValue = document.getElementById('rateInput').value;\n\n    if (!rateValue) {\n        showNotification('Please enter a value.');\n        return;\n    }\n\n    // Формирование тела запроса\n    const attributes = [\n        {\n            key: 'telemetry_rate_sec',\n            value: rateValue\n        }\n    ];\n\n    // Отправка запроса для установки атрибута\n    attributeService.saveEntityAttributes(\n        { entityType: 'DEVICE', id: entityId.id },\n        'SHARED_SCOPE',\n        attributes\n    ).subscribe(\n        response => {\n            console.log('Attribute saved successfully', response);\n            showNotification('Attribute saved successfully.');\n        },\n        error => {\n            console.error('Error saving attribute', error);\n            showNotification('Error saving attribute.');\n        }\n    );\n\n    // Функция для отображения уведомления\n    function showNotification(message) {\n        const notification = document.createElement('div');\n        notification.style.position = 'fixed';\n        notification.style.top = '50%';\n        notification.style.left = '50%';\n        notification.style.transform = 'translate(-50%, -50%)';\n        notification.style.padding = '20px';\n        notification.style.backgroundColor = '#4caf50';\n        notification.style.color = '#fff';\n        notification.style.fontSize = '18px';\n        notification.style.borderRadius = '8px';\n        notification.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';\n        notification.style.zIndex = '1000';\n        notification.textContent = message;\n\n        document.body.appendChild(notification);\n\n        setTimeout(() => {\n            document.body.removeChild(notification);\n        }, 3000);\n    }",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "9e45c61e-f46a-7f55-e1f7-164a805693a7"
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "23568f66-1d74-3497-8195-16acbfcb0092"
        },
        "480bcc9c-1173-e851-20f0-673d3900d0e4" : {
          "typeFullFqn" : "system.cards.markdown_card",
          "type" : "latest",
          "sizeX" : 5,
          "sizeY" : 3.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "848a675a-5517-9e39-5502-a565be585eab",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1722777439241,
                  "endTimeMs" : 1722863839241
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "useMarkdownTextFunction" : true,
              "markdownTextPattern" : "### Markdown/HTML card\n - **Current entity**: ${entityName}.\n - **Current value**: ${Random}.",
              "markdownTextFunction" : "    var token = localStorage.getItem(\"jwt_token\");\n\n    // Запрос списка устройств\n    var deviceXhr = new XMLHttpRequest();\n    var deviceUrl = \"https://iot000.sonmar.com.ua/api/deviceInfos/all?pageSize=10&page=0&sortProperty=createdTime&sortOrder=DESC&includeCustomers=true\";\n\n    deviceXhr.open(\"GET\", deviceUrl, false);\n    deviceXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    deviceXhr.send();\n\n    var deviceListHTML = '';\n    if (deviceXhr.status === 200) {\n        var deviceResponse = JSON.parse(deviceXhr.responseText);\n        var devices = deviceResponse.data;\n\n        // Устройства с типом \"gateway\"\n        var gatewayDevices = devices.filter(device => device.type === \"gateway\");\n\n        // Множество для хранения ID устройств, связанных с \"gateway\"\n        var relatedDeviceIds = new Set();\n\n        // Получение отношений для каждого устройства типа \"gateway\"\n        gatewayDevices.forEach(gatewayDevice => {\n            var relationsXhr = new XMLHttpRequest();\n            var relationsUrl = `https://iot000.sonmar.com.ua/api/relations/info?fromId=${gatewayDevice.id.id}&fromType=DEVICE`;\n\n            relationsXhr.open(\"GET\", relationsUrl, false);\n            relationsXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n            relationsXhr.send();\n\n            if (relationsXhr.status === 200) {\n                var relationsResponse = JSON.parse(relationsXhr.responseText);\n                relationsResponse.forEach(relation => {\n                    if (relation.type === \"Created\") {\n                        relatedDeviceIds.add(relation.to.id);\n                    }\n                });\n            }\n        });\n\n        // Фильтрация устройств: исключаем устройства с типом \"gateway\" и устройства, связанные с \"gateway\"\n        var filteredDevices = devices.filter(device => device.type !== \"gateway\" && !relatedDeviceIds.has(device.id.id));\n\n        // Генерация HTML для списка устройств\n        if (!filteredDevices || filteredDevices.length === 0) {\n            deviceListHTML = '<p>No devices available</p>';\n        } else {\n            deviceListHTML = '<label for=\"deviceSelect\">Select Devices:</label><ul id=\"deviceSelect\" style=\"list-style: none; padding: 0;\">';\n            filteredDevices.forEach(device => {\n                deviceListHTML += `<li id=\"device-${device.id.id}\"><input type=\"checkbox\" id=\"${device.id.id}\" value=\"${device.id.id}\"><label for=\"${device.id.id}\">${device.name} (${device.type}) - ID: ${device.id.id}</label></li>`;\n            });\n            deviceListHTML += '</ul>';\n            deviceListHTML += '<button id=\"linkDevicesButton\" onclick=\"handleCellClick()\" style=\"background-color: #007BFF; color: white; border: none; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 4px; transition: background-color 0.3s;\">Link Selected Devices</button>';\n        }\n    } else {\n        deviceListHTML = \"<p>Error fetching device list.</p>\";\n    }\n\n    let allTablesHTML = deviceListHTML;\n    allTablesHTML = '<div id=\"newContent\" style=\"font-family: Arial, sans-serif; background-color: #f4f4f9; margin: 0; padding: 0; display: flex; flex-direction: column; align-items: center; justify-content: flex-start; height: 100vh;\">' + allTablesHTML + '</div>';\n\n    window.handleCellClick = function() {\n        var selectedDeviceIds = Array.from(document.querySelectorAll('#deviceSelect input[type=\"checkbox\"]:checked')).map(checkbox => checkbox.value);\n\n        selectedDeviceIds.forEach(selectedDeviceId => {\n            var idGateway = data[0].$datasource.entityId;\n\n            var postBody = {\n                from: {\n                    entityType: \"DEVICE\",\n                    id: idGateway\n                },\n                to: {\n                    entityType: \"DEVICE\",\n                    id: selectedDeviceId\n                },\n                type: \"Created\",\n                typeGroup: \"COMMON\"\n            };\n\n            var xhr = new XMLHttpRequest();\n            var url = \"https://iot000.sonmar.com.ua/api/relation\";\n\n            xhr.open(\"POST\", url, true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200) {\n                        console.log('Success:', xhr.responseText);\n                        // Удаляем элемент из DOM\n                        var element = document.getElementById(`device-${selectedDeviceId}`);\n                        if (element) {\n                            element.remove();\n                        }\n                    } else {\n                        console.error('Error:', xhr.responseText);\n                    }\n                }\n            };\n\n            xhr.send(JSON.stringify(postBody));\n        });\n    };\n\n    return allTablesHTML;",
              "applyDefaultMarkdownStyle" : true,
              "markdownCss" : "body {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f9;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: flex-start;\n    height: 100vh;\n}\n\n#content {\n    width: 100%;\n    max-width: 800px;\n    padding: 20px;\n    box-sizing: border-box;\n}\n\n#deviceSelect {\n    list-style: none;\n    padding: 0;\n    margin: 20px 0;\n}\n\n#deviceSelect li {\n    margin-bottom: 10px;\n}\n\n#deviceSelect input[type=\"checkbox\"] {\n    margin-right: 10px;\n}\n\n#linkDevicesButton {\n    background-color: #007BFF;\n    color: white;\n    border: none;\n    padding: 10px 20px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    cursor: pointer;\n    border-radius: 4px;\n    transition: background-color 0.3s;\n}\n\n#linkDevicesButton:hover {\n    background-color: #0056b3;\n}\n\nlabel {\n    cursor: pointer;\n}\n"
            },
            "title" : "Markdown/HTML Card",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "480bcc9c-1173-e851-20f0-673d3900d0e4"
        }
      },
      "states" : {
        "default" : {
          "name" : "correlateAtr",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "7c175a1d-c7fe-17ca-e394-06ab0712288f" : {
                  "sizeX" : 15,
                  "sizeY" : 9,
                  "row" : 0,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        },
        "specgate" : {
          "name" : "specGate",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "dbd25480-ffe4-cd63-b32f-a9fcf21a6e21" : {
                  "sizeX" : 12,
                  "sizeY" : 14,
                  "row" : 7,
                  "col" : 12
                },
                "389bc668-e344-51eb-65b2-6cea475d08f8" : {
                  "sizeX" : 12,
                  "sizeY" : 9,
                  "row" : 0,
                  "col" : 0
                },
                "23568f66-1d74-3497-8195-16acbfcb0092" : {
                  "sizeX" : 12,
                  "sizeY" : 4,
                  "row" : 9,
                  "col" : 0
                },
                "480bcc9c-1173-e851-20f0-673d3900d0e4" : {
                  "sizeX" : 12,
                  "sizeY" : 4,
                  "row" : 0,
                  "col" : 12
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        }
      },
      "entityAliases" : {
        "66698354-eba5-b582-fbf3-ae76ccd90ac9" : {
          "id" : "66698354-eba5-b582-fbf3-ae76ccd90ac9",
          "alias" : "alias",
          "filter" : {
            "type" : "singleEntity",
            "resolveMultiple" : false,
            "singleEntity" : {
              "entityType" : "DEVICE",
              "id" : "e15f7220-2f07-11ef-849b-699b159d4945"
            }
          }
        },
        "17312e58-9903-dc10-d897-5bd197a00745" : {
          "id" : "17312e58-9903-dc10-d897-5bd197a00745",
          "alias" : "tableGateway",
          "filter" : {
            "type" : "entitiesByGroupName",
            "resolveMultiple" : true,
            "groupStateEntity" : false,
            "stateEntityParamName" : null,
            "groupType" : "DEVICE",
            "entityGroupNameFilter" : "gateway"
          }
        },
        "848a675a-5517-9e39-5502-a565be585eab" : {
          "id" : "848a675a-5517-9e39-5502-a565be585eab",
          "alias" : "depend",
          "filter" : {
            "type" : "stateEntity",
            "resolveMultiple" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null
          }
        },
        "69112ed9-7728-f943-65a2-cfefd3b8ef2c" : {
          "id" : "69112ed9-7728-f943-65a2-cfefd3b8ef2c",
          "alias" : "allDevises",
          "filter" : {
            "type" : "entitiesByGroupName",
            "resolveMultiple" : true,
            "groupStateEntity" : false,
            "stateEntityParamName" : null,
            "groupType" : "DEVICE",
            "entityGroupNameFilter" : "All"
          }
        }
      },
      "filters" : { },
      "timewindow" : {
        "displayValue" : "",
        "hideInterval" : false,
        "hideLastInterval" : false,
        "hideQuickInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1719590793288,
            "endTimeMs" : 1719677193288
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "8d9dc840-3631-11ef-849b-699b159d4945"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "correlateAtr",
    "ownerId" : null,
    "title" : "correlateAtr"
  },
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}