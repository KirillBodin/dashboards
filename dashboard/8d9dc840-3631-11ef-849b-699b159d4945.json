{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "7c175a1d-c7fe-17ca-e394-06ab0712288f" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1719590910152,
                  "endTimeMs" : 1719677310152
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "entitiesTitle" : "Entities"
            },
            "title" : "Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "deviceId" : null,
              "entityAliasId" : "17312e58-9903-dc10-d897-5bd197a00745",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.3506656507153225
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "advanced",
            "actions" : {
              "rowClick" : [ {
                "name" : "toGateway",
                "icon" : "more_vert",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "specgate",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "2e9985f4-33db-6f20-7ce3-f9a8968ad4d3"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "7c175a1d-c7fe-17ca-e394-06ab0712288f"
        },
        "23568f66-1d74-3497-8195-16acbfcb0092" : {
          "typeFullFqn" : "system.cards.markdown_card",
          "type" : "latest",
          "sizeX" : 5,
          "sizeY" : 3.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "848a675a-5517-9e39-5502-a565be585eab",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1721219553836,
                  "endTimeMs" : 1721305953836
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "useMarkdownTextFunction" : true,
              "markdownTextPattern" : "### Markdown/HTML card\n - **Current entity**: ${entityName}.\n - **Current value**: ${Random}.",
              "markdownTextFunction" : "// Make sure the input element gets the value of telemetry_rate_sec when the page is rendered\n    console.log(data[0].entityId)\n    console.log(\"\")\n    const entityId = data[0].entityId;\n    const attributeService = ctx.$scope.$injector.get(ctx.servicesMap.get('attributeService'));\n\n    // Get telemetry_rate_sec value\n    attributeService.getEntityAttributes({ entityType: 'DEVICE', id: entityId }, 'SHARED_SCOPE', ['telemetry_rate_sec'])\n        .subscribe(\n            response => {\n                const telemetryRateSec = response.find(item => item.key === 'telemetry_rate_sec');\n                const rateValue = telemetryRateSec ? telemetryRateSec.value : '';\n                document.getElementById('rateInput').value = rateValue;\n            },\n            error => {\n                console.error('Error fetching telemetry_rate_sec', error);\n            }\n        );\n\n    // Return the HTML content\n    return `\n        <div style=\"margin: 20px;\">\n            <label for=\"rateInput\">Rate (sec):</label>\n            <input type=\"text\" id=\"rateInput\" name=\"rateInput\" style=\"margin-left: 10px; padding: 5px; border-radius: 4px; border: 1px solid #ccc;\">\n            <button id=\"submitButton\" style=\"margin-left: 10px; padding: 5px 10px; border-radius: 4px; border: 1px solid #007BFF; background-color: #007BFF; color: #fff; cursor: pointer;\">\n                Submit\n            </button>\n            <label id=\"rateLabel\" style=\"margin-left: 20px;\">ratesec</label>\n        </div>\n    \n    `;",
              "applyDefaultMarkdownStyle" : true,
              "markdownCss" : ""
            },
            "title" : "Markdown/HTML Card",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "actions" : {
              "elementClick" : [ {
                "name" : "submitButton",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\n    let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\n    // Получить значение из Input\n    const rateValue = document.getElementById('rateInput').value;\n\n    if (!rateValue) {\n        showNotification('Please enter a value.');\n        return;\n    }\n\n    // Формирование тела запроса\n    const attributes = [\n        {\n            key: 'telemetry_rate_sec',\n            value: rateValue\n        }\n    ];\n\n    // Отправка запроса для установки атрибута\n    attributeService.saveEntityAttributes(\n        { entityType: 'DEVICE', id: entityId.id },\n        'SHARED_SCOPE',\n        attributes\n    ).subscribe(\n        response => {\n            console.log('Attribute saved successfully', response);\n            showNotification('Attribute saved successfully.');\n        },\n        error => {\n            console.error('Error saving attribute', error);\n            showNotification('Error saving attribute.');\n        }\n    );\n\n    // Функция для отображения уведомления\n    function showNotification(message) {\n        const notification = document.createElement('div');\n        notification.style.position = 'fixed';\n        notification.style.top = '50%';\n        notification.style.left = '50%';\n        notification.style.transform = 'translate(-50%, -50%)';\n        notification.style.padding = '20px';\n        notification.style.backgroundColor = '#4caf50';\n        notification.style.color = '#fff';\n        notification.style.fontSize = '18px';\n        notification.style.borderRadius = '8px';\n        notification.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';\n        notification.style.zIndex = '1000';\n        notification.textContent = message;\n\n        document.body.appendChild(notification);\n\n        setTimeout(() => {\n            document.body.removeChild(notification);\n        }, 3000);\n    }",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "9e45c61e-f46a-7f55-e1f7-164a805693a7"
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "23568f66-1d74-3497-8195-16acbfcb0092"
        },
        "af4f2a0d-c0dc-7c7b-4c1c-78a35ec23fdb" : {
          "typeFullFqn" : "system.cards.markdown_card",
          "type" : "latest",
          "sizeX" : 5,
          "sizeY" : 3.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "848a675a-5517-9e39-5502-a565be585eab",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1723121482621,
                  "endTimeMs" : 1723207882621
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "useMarkdownTextFunction" : true,
              "markdownTextPattern" : "### Markdown/HTML card\n - **Current entity**: ${entityName}.\n - **Current value**: ${Random}.",
              "markdownTextFunction" : "console.log(ctx)\nvar token = localStorage.getItem(\"jwt_token\");\nvar baseUrl = \"https://iot000.sonmar.com.ua\";\n\n// Создание поля поиска\nlet searchHTML = `\n    <label for=\"deviceSearch\">Search Devices:</label>\n    <input type=\"text\" id=\"deviceSearch\" oninput=\"filterDevices()\" placeholder=\"Search by name or label\" style=\"padding: 8px; margin-bottom: 10px; width: calc(100% - 20px); box-sizing: border-box;\">\n`;\n\n// Запрос списка устройств\nvar deviceXhr = new XMLHttpRequest();\nvar deviceUrl = `${baseUrl}/api/deviceInfos/all?pageSize=2000&page=0&sortProperty=createdTime&sortOrder=DESC&includeCustomers=true`;\n\ndeviceXhr.open(\"GET\", deviceUrl, false);\ndeviceXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\ndeviceXhr.send();\n\nvar devices = [];\nvar deviceListHTML = '';\nif (deviceXhr.status === 200) {\n    var deviceResponse = JSON.parse(deviceXhr.responseText);\n    devices = deviceResponse.data;\n\n    // Фильтрация устройств: оставить только те, у которых есть группа \"non-gateway bound\"\n    var filteredDevices = devices.filter(device => device.groups.some(group => group.name === \"non-gateway bound\"));\n\n    // Генерация HTML для списка устройств\n    if (!filteredDevices || filteredDevices.length === 0) {\n        deviceListHTML = '<p>No devices available</p>';\n    } else {\n        deviceListHTML = '<label for=\"deviceSelect\">Select Devices:</label><ul id=\"deviceSelect\" style=\"list-style: none; padding: 0;\">';\n        filteredDevices.forEach(device => {\n            deviceListHTML += `<li id=\"device-${device.id.id}\" class=\"device-item\"><input type=\"checkbox\" id=\"${device.id.id}\" value=\"${device.id.id}\"><label for=\"${device.id.id}\">${device.name} | ${device.label || 'No label'} | ${device.type} - ID: ${device.id.id}</label></li>`;\n        });\n        deviceListHTML += '</ul>';\n        deviceListHTML += '<button id=\"linkDevicesButton\" onclick=\"connToGateway()\" style=\"background-color: #007BFF; color: white; border: none; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 4px; transition: background-color 0.3s;\">Connect New Device</button>';\n    }\n} else {\n    deviceListHTML = \"<p>Error fetching device list.</p>\";\n}\n\nlet allTablesHTML = searchHTML + deviceListHTML;\nallTablesHTML = '<div id=\"newContent\" style=\"font-family: Arial, sans-serif; background-color: #f4f4f9; margin: 0; padding: 0; display: flex; flex-direction: column; align-items: center; justify-content: flex-start; min-height: 30vh;\">' + allTablesHTML + '</div>';\n\nwindow.filterDevices = function() {\n    var searchInput = document.getElementById(\"deviceSearch\").value.toLowerCase();\n    var deviceItems = document.querySelectorAll(\".device-item\");\n\n    deviceItems.forEach(function(item) {\n        var deviceLabel = item.textContent.toLowerCase();\n        if (deviceLabel.includes(searchInput)) {\n            item.style.display = \"block\";\n        } else {\n            item.style.display = \"none\";\n        }\n    });\n};\n\nwindow.connToGateway = function() {\n    var selectedDeviceIds = Array.from(document.querySelectorAll('#deviceSelect input[type=\"checkbox\"]:checked')).map(checkbox => checkbox.value);\n\n    if (selectedDeviceIds.length > 0) {\n        // Сначала удаляем устройства из группы \"non-gateway bound\"\n        removeFromNonGatewayBoundGroup(selectedDeviceIds);\n\n        // После удаления добавляем устройства в \"gateway-bound\"\n        addToGatewayBoundGroup(selectedDeviceIds);\n\n        // Привязка каждого устройства к шлюзу\n        selectedDeviceIds.forEach(selectedDeviceId => {\n            var idGateway = data[0].$datasource.entityId;\n\n            var postBody = {\n                from: {\n                    entityType: \"DEVICE\",\n                    id: idGateway\n                },\n                to: {\n                    entityType: \"DEVICE\",\n                    id: selectedDeviceId\n                },\n                type: \"Created\",\n                typeGroup: \"COMMON\"\n            };\n\n            var xhr = new XMLHttpRequest();\n            var url = `${baseUrl}/api/relation`;\n\n            xhr.open(\"POST\", url, true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200) {\n                        console.log('Success:', xhr.responseText);\n                        // Удаляем элемент из DOM\n                        var element = document.getElementById(`device-${selectedDeviceId}`);\n                        if (element) {\n                            element.remove();\n                        }\n                    } else {\n                        console.error('Error:', xhr.responseText);\n                    }\n                }\n            };\n\n            xhr.send(JSON.stringify(postBody));\n        });\n    } else {\n        showCustomNotification(\"Error\", \"No devices selected.\", \"error\");\n    }\n};\n\n// Функция для удаления устройств из группы \"non-gateway bound\"\nfunction removeFromNonGatewayBoundGroup(deviceIds) {\n    var groupXhr = new XMLHttpRequest();\n    var groupUrl = `${baseUrl}/api/entityGroups/DEVICE?pageSize=1000&page=0&sortProperty=createdTime&sortOrder=DESC&includeShared=false`;\n\n    groupXhr.open(\"GET\", groupUrl, false);\n    groupXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    groupXhr.send();\n\n    if (groupXhr.status === 200) {\n        var groupResponse = JSON.parse(groupXhr.responseText);\n        var nonGatewayBoundGroup = groupResponse.data.find(group => group.name === \"non-gateway bound\");\n\n        if (nonGatewayBoundGroup) {\n            var nonGatewayBoundGroupId = nonGatewayBoundGroup.id.id;\n\n            var deleteEntitiesXhr = new XMLHttpRequest();\n            var deleteEntitiesUrl = `${baseUrl}/api/entityGroup/${nonGatewayBoundGroupId}/deleteEntities`;\n\n            deleteEntitiesXhr.open(\"POST\", deleteEntitiesUrl, true);\n            deleteEntitiesXhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            deleteEntitiesXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n\n            deleteEntitiesXhr.onreadystatechange = function() {\n                if (deleteEntitiesXhr.readyState === 4) {\n                    if (deleteEntitiesXhr.status === 200) {\n                        console.log(\"Devices removed from non-gateway bound group successfully!\");\n                    } else {\n                        showCustomNotification(\"Error\", \"Failed to remove devices from non-gateway bound group.\", \"error\");\n                    }\n                }\n            };\n\n            deleteEntitiesXhr.send(JSON.stringify(deviceIds));\n        } else {\n            showCustomNotification(\"Error\", \"non-gateway bound group not found.\", \"error\");\n        }\n    } else {\n        showCustomNotification(\"Error\", \"Failed to fetch groups.\", \"error\");\n    }\n}\n\n// Функция для добавления устройств в группу \"gateway-bound\"\nfunction addToGatewayBoundGroup(deviceIds) {\n    var groupXhr = new XMLHttpRequest();\n    var groupUrl = `${baseUrl}/api/entityGroups/DEVICE?pageSize=1000&page=0&sortProperty=createdTime&sortOrder=DESC&includeShared=false`;\n\n    groupXhr.open(\"GET\", groupUrl, false);\n    groupXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    groupXhr.send();\n\n    if (groupXhr.status === 200) {\n        var groupResponse = JSON.parse(groupXhr.responseText);\n        var gatewayBoundGroup = groupResponse.data.find(group => group.name === \"gateway-bound\");\n\n        if (gatewayBoundGroup) {\n            var gatewayBoundGroupId = gatewayBoundGroup.id.id;\n\n            var addEntitiesXhr = new XMLHttpRequest();\n            var addEntitiesUrl = `${baseUrl}/api/entityGroup/${gatewayBoundGroupId}/addEntities`;\n\n            addEntitiesXhr.open(\"POST\", addEntitiesUrl, true);\n            addEntitiesXhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            addEntitiesXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n\n            addEntitiesXhr.onreadystatechange = function() {\n                if (addEntitiesXhr.readyState === 4) {\n                    if (addEntitiesXhr.status === 200) {\n                        showCustomNotification(\"Success\", \"Device linked successfully!\", \"success\");\n                          var params = {\n  \n  };\n\n  \nctx.updateAliases();\n\n                    } else {\n                        showCustomNotification(\"Error\", \"Failed to add devices to gateway-bound group.\", \"error\");\n                    }\n                }\n            };\n\n            addEntitiesXhr.send(JSON.stringify(deviceIds));\n        } else {\n            showCustomNotification(\"Error\", \"gateway-bound group not found.\", \"error\");\n        }\n    } else {\n        showCustomNotification(\"Error\", \"Failed to fetch groups.\", \"error\");\n    }\n}\n\n// Функция для показа кастомного уведомления\nfunction showCustomNotification(title, message, type) {\n    const notification = document.createElement('div');\n    notification.style.position = 'fixed';\n    notification.style.top = '50%';\n    notification.style.left = '50%';\n    notification.style.transform = 'translate(-50%, -50%)';\n    notification.style.padding = '20px';\n    notification.style.backgroundColor = type === \"success\" ? '#4caf50' : '#f44336';\n    notification.style.color = '#fff';\n    notification.style.fontSize = '18px';\n    notification.style.borderRadius = '8px';\n    notification.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';\n    notification.style.zIndex = '1000';\n    notification.style.textAlign = 'center';\n\n    const notificationTitle = document.createElement('h3');\n    notificationTitle.textContent = title;\n    notificationTitle.style.margin = '0 0 10px 0';\n\n    const notificationMessage = document.createElement('p');\n    notificationMessage.textContent = message;\n    notificationMessage.style.margin = '0';\n\n    notification.appendChild(notificationTitle);\n    notification.appendChild(notificationMessage);\n\n    document.body.appendChild(notification);\n\n    setTimeout(() => {\n        document.body.removeChild(notification);\n    }, 3000);\n}\n\nreturn allTablesHTML;\n",
              "applyDefaultMarkdownStyle" : true,
              "markdownCss" : ""
            },
            "title" : "Markdown/HTML Card",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "actions" : {
              "elementClick" : [ ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "af4f2a0d-c0dc-7c7b-4c1c-78a35ec23fdb"
        },
        "032766de-da4a-744f-5dca-21dcac69f59f" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1723381515043,
                  "endTimeMs" : 1723467915043
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "entitiesTitle" : "Entities"
            },
            "title" : "Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "eccbc4ee-907e-e166-2c78-7dd4fa5a9e07",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.7613219726473611
              }, {
                "name" : "label",
                "type" : "entityField",
                "label" : "Label",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.33851649431091646,
                "decimals" : 0
              }, {
                "name" : "type",
                "type" : "entityField",
                "label" : "Type",
                "color" : "#f44336",
                "settings" : { },
                "_hash" : 0.7045991944042103,
                "decimals" : 0
              }, {
                "name" : "active",
                "type" : "attribute",
                "label" : "Status",
                "color" : "#ffc107",
                "settings" : {
                  "customTitle" : "",
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : true,
                  "useCellContentFunctionOnExport" : true,
                  "cellContentFunction" : "var color;\nvar active = value;\nif (active == 'true') { // all key values here are strings\n  color = '#27AE60';\n} else {\n  color = '#EB5757';\n}\nreturn '<span style=\"font-size: 18px; color: ' + color + '\">&#11044;</span>';",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.16243675709204985,
                "decimals" : 0,
                "aggregationType" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "basic",
            "actions" : {
              "actionCellButton" : [ {
                "name" : "settings",
                "icon" : "settings",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "settings_device",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "0efff3ce-83b3-dbe1-9a66-e8bcaa2ca73d"
              }, {
                "name" : "Delete device",
                "icon" : "delete",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet token = localStorage.getItem(\"jwt_token\");\nlet baseUrl = \"https://iot000.sonmar.com.ua\";\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    let title = 'Delete device \"' + entityName + '\"';\n    let content = 'Are you sure you want to delete the device \"' + entityName + '\"?';\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function(result) {\n            if (result) {\n                // Начинаем выполнение объединенных действий\n                performActions();\n            }\n        }\n    );\n}\n\nfunction performActions() {\n    // Отвязываем девайс от гейтвея и удаляем из конфига\n    fetch(`${baseUrl}/api/relations/info?toId=${entityId.id}&toType=DEVICE`, {\n        method: 'GET',\n        headers: {\n            'X-Authorization': `Bearer ${token}`\n        }\n    })\n    .then(response => response.json())\n    .then(relations => {\n        const createdRelation = relations.find(relation => relation.type === 'Created');\n        if (createdRelation) {\n            const fromId = createdRelation.from.id;\n            console.log('Found relation to ID:', fromId);\n\n            // Удаляем найденное отношение\n            fetch(`${baseUrl}/api/relation?fromId=${fromId}&fromType=DEVICE&relationType=Created&toId=${entityId.id}&toType=DEVICE`, {\n                method: 'DELETE',\n                headers: {\n                    'X-Authorization': `Bearer ${token}`\n                }\n            })\n            .then(response => {\n                if (response.ok) {\n                    console.log('Relation deleted successfully.');\n                    removeFromConfig(fromId);\n                } else {\n                    showErrorDialog();\n                }\n            });\n        } else {\n            console.log('No Created relation found.');\n            manageGroups();\n        }\n    })\n    .catch(() => showErrorDialog());\n}\n\nfunction removeFromConfig(fromId) {\n    fetch(`${baseUrl}/api/plugins/telemetry/DEVICE/${fromId}/values/attributes/SHARED_SCOPE`, {\n        method: 'GET',\n        headers: {\n            'X-Authorization': `Bearer ${token}`\n        }\n    })\n    .then(response => response.json())\n    .then(attributes => {\n        const configFromTB = attributes.find(attr => attr.key === \"configFromTB\");\n        if (configFromTB) {\n            let config = JSON.parse(configFromTB.value);\n            console.log('Original config:', config);\n\n            if (config.hasOwnProperty(entityName)) {\n                delete config[entityName];\n                console.log('Updated config after deletion:', config);\n\n                // Сохраняем обновленный конфиг в правильном формате\n                fetch(`${baseUrl}/api/plugins/telemetry/DEVICE/${fromId}/SHARED_SCOPE`, {\n                    method: 'POST',\n                    headers: {\n                        'X-Authorization': `Bearer ${token}`,\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ configFromTB: JSON.stringify(config) })\n                })\n                .then(response => {\n                    if (response.ok) {\n                        console.log(\"Device removed from config successfully.\");\n                        manageGroups();  // После успешного удаления из конфига, продолжаем остальные действия\n                    } else {\n                        showErrorDialog();\n                    }\n                });\n            } else {\n                console.log(`Config does not contain entityName: ${entityName}`);\n                manageGroups();  // Продолжаем, если элемент не найден в конфиге\n            }\n        } else {\n            console.log(\"configFromTB not found.\");\n            manageGroups();  // Продолжаем, если конфиг не найден\n        }\n    })\n    .catch(() => showErrorDialog());\n}\n\n\nfunction manageGroups() {\n    fetch(`${baseUrl}/api/entityGroups/DEVICE?pageSize=1000&page=0&sortProperty=createdTime&sortOrder=DESC&includeShared=false`, {\n        method: 'GET',\n        headers: {\n            'X-Authorization': `Bearer ${token}`\n        }\n    })\n    .then(response => response.json())\n    .then(response => {\n        const groups = response.data;\n        const gatewayBoundGroup = groups.find(group => group.name === \"gateway-bound\");\n        const nonGatewayBoundGroup = groups.find(group => group.name === \"non-gateway bound\");\n\n        if (gatewayBoundGroup && nonGatewayBoundGroup) {\n            const gatewayBoundGroupId = gatewayBoundGroup.id.id;\n            const nonGatewayBoundGroupId = nonGatewayBoundGroup.id.id;\n\n            // Удаляем из группы gateway-bound\n            fetch(`${baseUrl}/api/entityGroup/${gatewayBoundGroupId}/deleteEntities`, {\n                method: 'POST',\n                headers: {\n                    'X-Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify([entityId.id]) // Передаем только строковый идентификатор устройства\n            })\n            .then(response => {\n                if (response.ok) {\n                    console.log(\"Device removed from gateway-bound group successfully.\");\n\n                    // Добавляем в группу non-gateway bound\n                    fetch(`${baseUrl}/api/entityGroup/${nonGatewayBoundGroupId}/addEntities`, {\n                        method: 'POST',\n                        headers: {\n                            'X-Authorization': `Bearer ${token}`,\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify([entityId.id]) // Передаем только строковый идентификатор устройства\n                    })\n                    .then(response => {\n                        if (response.ok) {\n                            console.log(\"Device added to non-gateway bound group successfully.\");\n                            showSuccessDialog();\n                        } else {\n                            showErrorDialog();\n                        }\n                    });\n                } else {\n                    showErrorDialog();\n                }\n            });\n        } else {\n            showErrorDialog();\n        }\n    })\n    .catch(() => showErrorDialog());\n}\n\nfunction showSuccessDialog() {\n    let title = 'Success';\n    let content = 'The device was successfully deleted and its configurations updated.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {\n            widgetContext.updateAliases();\n        }\n    );\n}\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while processing the request. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "1c85c7e9-34fc-0a75-7a8b-6a55421732cc"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "032766de-da4a-744f-5dca-21dcac69f59f"
        },
        "441ee506-3beb-7745-47af-e35f3c80ac97" : {
          "typeFullFqn" : "system.cards.markdown_card",
          "type" : "latest",
          "sizeX" : 5,
          "sizeY" : 3.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "848a675a-5517-9e39-5502-a565be585eab",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1723121482621,
                  "endTimeMs" : 1723207882621
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "useMarkdownTextFunction" : true,
              "markdownTextPattern" : "### Markdown/HTML card\n - **Current entity**: ${entityName}.\n - **Current value**: ${Random}.",
              "markdownTextFunction" : "var idGateway = data[0].$datasource.entityId;\nvar baseUrl = \"https://iot000.sonmar.com.ua\";\nvar token = localStorage.getItem(\"jwt_token\");\n\n// Новый запрос для списка устройств\nvar deviceXhr = new XMLHttpRequest();\nvar deviceUrl = `${baseUrl}/api/deviceInfos/all?pageSize=2000&page=0&sortProperty=createdTime&sortOrder=DESC&includeCustomers=true`;\n\ndeviceXhr.open(\"GET\", deviceUrl, false);\ndeviceXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\ndeviceXhr.send();\n\nvar ruleChainListHTML = '';\nvar filteredDevices = [];\nif (deviceXhr.status === 200) {\n    var deviceResponse = JSON.parse(deviceXhr.responseText);\n    var devices = deviceResponse.data;\n\n    // Фильтрация устройств: оставить только те, у которых есть группа \"non-gateway bound\"\n    filteredDevices = devices.filter(device => device.groups && device.groups.some(group => group.name === \"non-gateway bound\"));\n\n    if (!filteredDevices || filteredDevices.length === 0) {\n        ruleChainListHTML = '<p>No devices available in non-gateway bound group</p>';\n    } else {\n        ruleChainListHTML = `\n            <input style=\"margin-bottom: 10px; padding: 10px; width: calc(100% - 20px); box-sizing: border-box;\" list=\"ruleChainDropdown\" id=\"ruleChainSearch\" placeholder=\"Search devices by name or label\">\n            <datalist id=\"ruleChainDropdown\">\n        `;\n        filteredDevices.forEach(device => {\n            var displayName = device.name;\n            var displayLabel = device.label || \"no label\"; // Если метки нет, оставляем пустую строку\n            var displayType = device.type || \"Unknown\"; // Если тип не указан, отображаем \"Unknown\"\nvar displayText = `Name: ${displayName}, Label: ${displayLabel}`;\n\n\n            ruleChainListHTML += `<option value=\"${displayText}\" data-id=\"${device.id.id}\">${displayText}</option>`;\n        });\n        ruleChainListHTML += '</datalist>';\n    }\n} else {\n    ruleChainListHTML = \"<p>Error fetching device list.</p>\";\n}\n\nruleChainListHTML += `\n    <button id=\"linkDeviceButton\" onclick=\"linkSelectedDevice()\" style=\"background-color: #007BFF; color: white; border: none; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 4px; transition: background-color 0.3s;\">Connect New Device</button>`;\n\n// Функция для привязки выбранного устройства\nwindow.linkSelectedDevice = function() {\n    var selectedDeviceText = document.querySelector('#ruleChainSearch').value;\n    var selectedOption = Array.from(document.querySelectorAll('#ruleChainDropdown option')).find(option => option.value === selectedDeviceText);\nconsole.log(selectedOption)\n    if (selectedOption) {\n        var selectedDeviceId = selectedOption.getAttribute('data-id');\n\n        // Удаление устройства из группы \"non-gateway bound\"\n        removeFromNonGatewayBoundGroup([selectedDeviceId]);\n\n        // Добавление устройства в группу \"gateway-bound\"\n        addToGatewayBoundGroup([selectedDeviceId]);\n\n        var postBody = {\n            from: {\n                entityType: \"DEVICE\",\n                id: idGateway\n            },\n            to: {\n                entityType: \"DEVICE\",\n                id: selectedDeviceId\n            },\n            type: \"Created\",\n            typeGroup: \"COMMON\"\n        };\n\n        var xhr = new XMLHttpRequest();\n        var url = `${baseUrl}/api/relation`;\n\n        xhr.open(\"POST\", url, true);\n        xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n\n        xhr.onreadystatechange = function() {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    console.log('Success:', xhr.responseText);\n                    showCustomNotification(\"Success\", \"Device linked successfully!\", \"success\");\n\n                    // Удаляем устройство из списка\n                    filteredDevices = filteredDevices.filter(device => device.id.id !== selectedDeviceId);\n                    updateDeviceList();\n\n                    // Если это было последнее устройство, очищаем список и ввод\n                    if (filteredDevices.length === 0) {\n                        document.querySelector('#ruleChainSearch').value = '';\n                        document.getElementById('ruleChainDropdown').innerHTML = '';\n                    }\n                } else {\n                    console.error('Error:', xhr.responseText);\n                    showCustomNotification(\"Error\", \"Failed to link device.\", \"error\");\n                }\n            }\n        };\n\n        xhr.send(JSON.stringify(postBody));\n    } else {\n        showCustomNotification(\"Error\", \"No valid device selected.\", \"error\");\n    }\n};\n\n// Функция для обновления списка устройств после привязки\nfunction updateDeviceList() {\n    var datalist = document.getElementById('ruleChainDropdown');\n    datalist.innerHTML = '';\n\n    filteredDevices.forEach(device => {\n        var displayName = device.name;\n        var displayLabel = device.label || \"\"; // Если метки нет, оставляем пустую строку\n        var displayText = `${displayName} (${displayLabel})`;\n\n        datalist.innerHTML += `<option value=\"${displayText}\" data-id=\"${device.id.id}\">${displayText}</option>`;\n    });\n}\n\n// Функция для удаления устройства из группы \"non-gateway bound\"\nfunction removeFromNonGatewayBoundGroup(deviceIds) {\n    var groupXhr = new XMLHttpRequest();\n    var groupUrl = `${baseUrl}/api/entityGroups/DEVICE?pageSize=1000&page=0&sortProperty=createdTime&sortOrder=DESC&includeShared=false`;\n\n    groupXhr.open(\"GET\", groupUrl, false);\n    groupXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    groupXhr.send();\n\n    if (groupXhr.status === 200) {\n        var groupResponse = JSON.parse(groupXhr.responseText);\n        var nonGatewayBoundGroup = groupResponse.data.find(group => group.name === \"non-gateway bound\");\n\n        if (nonGatewayBoundGroup) {\n            var nonGatewayBoundGroupId = nonGatewayBoundGroup.id.id;\n\n            var deleteEntitiesXhr = new XMLHttpRequest();\n            var deleteEntitiesUrl = `${baseUrl}/api/entityGroup/${nonGatewayBoundGroupId}/deleteEntities`;\n\n            deleteEntitiesXhr.open(\"POST\", deleteEntitiesUrl, true);\n            deleteEntitiesXhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            deleteEntitiesXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n\n            deleteEntitiesXhr.onreadystatechange = function() {\n                if (deleteEntitiesXhr.readyState === 4) {\n                    if (deleteEntitiesXhr.status === 200) {\n                        console.log(\"Device removed from non-gateway bound group successfully!\");\n                    } else {\n                        showCustomNotification(\"Error\", \"Failed to remove device from non-gateway bound group.\", \"error\");\n                    }\n                }\n            };\n\n            deleteEntitiesXhr.send(JSON.stringify(deviceIds));\n        } else {\n            showCustomNotification(\"Error\", \"non-gateway bound group not found.\", \"error\");\n        }\n    } else {\n        showCustomNotification(\"Error\", \"Failed to fetch groups.\", \"error\");\n    }\n}\n\n// Функция для добавления устройства в группу \"gateway-bound\"\nfunction addToGatewayBoundGroup(deviceIds) {\n    var groupXhr = new XMLHttpRequest();\n    var groupUrl = `${baseUrl}/api/entityGroups/DEVICE?pageSize=1000&page=0&sortProperty=createdTime&sortOrder=DESC&includeShared=false`;\n\n    groupXhr.open(\"GET\", groupUrl, false);\n    groupXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    groupXhr.send();\n\n    if (groupXhr.status === 200) {\n        var groupResponse = JSON.parse(groupXhr.responseText);\n        var gatewayBoundGroup = groupResponse.data.find(group => group.name === \"gateway-bound\");\n\n        if (gatewayBoundGroup) {\n            var gatewayBoundGroupId = gatewayBoundGroup.id.id;\n\n            var addEntitiesXhr = new XMLHttpRequest();\n            var addEntitiesUrl = `${baseUrl}/api/entityGroup/${gatewayBoundGroupId}/addEntities`;\n\n            addEntitiesXhr.open(\"POST\", addEntitiesUrl, true);\n            addEntitiesXhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            addEntitiesXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n\n            addEntitiesXhr.onreadystatechange = function() {\n                if (addEntitiesXhr.readyState === 4) {\n                    if (addEntitiesXhr.status === 200) {\n                        document.getElementById('ruleChainDropdown').innerHTML = '';\n                        showCustomNotification(\"Success\", \"Device linked successfully!\", \"success\");\n                        ctx.updateAliases();\n            \n                    } else {\n                        showCustomNotification(\"Error\", \"Failed to add device to gateway-bound group.\", \"error\");\n                    }\n                }\n            };\n\n            addEntitiesXhr.send(JSON.stringify(deviceIds));\n        } else {\n            showCustomNotification(\"Error\", \"gateway-bound group not found.\", \"error\");\n        }\n    } else {\n        showCustomNotification(\"Error\", \"Failed to fetch groups.\", \"error\");\n    }\n}\n\n// Функция для показа кастомного уведомления\nfunction showCustomNotification(title, message, type) {\n    const notification = document.createElement('div');\n    notification.style.position = 'fixed';\n    notification.style.top = '50%';\n    notification.style.left = '50%';\n    notification.style.transform = 'translate(-50%, -50%)';\n    notification.style.padding = '20px';\n    notification.style.backgroundColor = type === \"success\" ? '#4caf50' : '#f44336';\n    notification.style.color = '#fff';\n    notification.style.fontSize = '18px';\n    notification.style.borderRadius = '8px';\n    notification.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';\n    notification.style.zIndex = '1000';\n    notification.style.textAlign = 'center';\n\n    const notificationTitle = document.createElement('h3');\n    notificationTitle.textContent = title;\n    notificationTitle.style.margin = '0 0 10px 0';\n\n    const notificationMessage = document.createElement('p');\n    notificationMessage.textContent = message;\n    notificationMessage.style.margin = '0';\n\n    notification.appendChild(notificationTitle);\n    notification.appendChild(notificationMessage);\n\n    document.body.appendChild(notification);\n\n    setTimeout(() => {\n        document.body.removeChild(notification);\n    }, 3000);\n}\n\nreturn ruleChainListHTML;\n",
              "applyDefaultMarkdownStyle" : true,
              "markdownCss" : ""
            },
            "title" : "Markdown/HTML Card",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "441ee506-3beb-7745-47af-e35f3c80ac97"
        },
        "88efba94-da76-6fa4-1733-ccd796aa49f7" : {
          "typeFullFqn" : "system.cards.markdown_card",
          "type" : "latest",
          "sizeX" : 5,
          "sizeY" : 3.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "7c77b59e-d563-6fa1-fc1e-2a99a23f11a9",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1719591017735,
                  "endTimeMs" : 1719677417735
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "useMarkdownTextFunction" : true,
              "markdownTextPattern" : "### Markdown/HTML card\n - **Current entity**: ${entityName}.\n - **Current value**: ${Random}.",
              "markdownTextFunction" : "\nvar xhr = new XMLHttpRequest();\n    var entityId = data[0].entityId;\n    var url = `https://iot000.sonmar.com.ua/api/plugins/telemetry/DEVICE/${entityId}/values/attributes/CLIENT_SCOPE`;\n    var token = localStorage.getItem(\"jwt_token\");\n\n    xhr.open(\"GET\", url, false);\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    xhr.send();\n\n    if (xhr.status === 200) {\n        var response = JSON.parse(xhr.responseText);\n\n        // Проверка на наличие данных\n        if (!response || response.length === 0) {\n            return 'No data available';\n        }\n\n        // Парсинг данных и построение таблицы\n        let tableHTML = '<table border=\"1\"><tr><th>Title</th><th>ID</th><th>Registers</th><th>Description</th></tr>';\n        \n        response[0].value.forEach(item => {\n            let registersHTML = '<details><summary>Registers</summary>';\n            registersHTML += item.registers.map(register => `<div>${register.register_address}: ${register.key}: ${register.register_id}</div>`).join('');\n            registersHTML += '</details>';\n            \n            tableHTML += `<tr>\n                            <td>${item.title}</td>\n                            <td>${item.id}</td>\n                            <td>${registersHTML}</td>\n                            <td>${item.description}</td>\n                          </tr>`;\n        });\n        \n        tableHTML += '</table>';\n        \n        return tableHTML;\n    } else {\n        return \"Error fetching telemetry data.\";\n    }",
              "applyDefaultMarkdownStyle" : true,
              "markdownCss" : "/* Общие стили для страницы */\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f9;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 900vh;\n}\n\n/* Стили для таблицы */\ntable {\n    border-collapse: collapse;\n    width: 80%;\n    margin: 20px auto;\n    background-color: #fff;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nth, td {\n    padding: 12px 15px;\n    border: 1px solid #ddd;\n    text-align: left;\n}\n\nth {\n    background-color: #007BFF;\n    color: white;\n    font-weight: bold;\n}\n\ntr:nth-child(even) {\n    background-color: #f9f9f9;\n}\n\ntr:hover {\n    background-color: #f1f1f1;\n}\n\ntd {\n    color: #333;\n}\n\n/* Стили для элементов details и summary */\ndetails {\n    margin: 10px 0;\n}\n\nsummary {\n    cursor: pointer;\n    font-weight: bold;\n}\n\ndetails[open] summary {\n    color: #007BFF;\n}\n"
            },
            "title" : "Markdown/HTML Card",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "88efba94-da76-6fa4-1733-ccd796aa49f7"
        },
        "9541ffbd-b5c0-644d-57b6-151c8e8d13ed" : {
          "typeFullFqn" : "system.cards.markdown_card",
          "type" : "latest",
          "sizeX" : 5,
          "sizeY" : 3.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "848a675a-5517-9e39-5502-a565be585eab",
              "dataKeys" : [ {
                "name" : "type",
                "type" : "entityField",
                "label" : "Type",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.6689271212499383
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1719765695182,
                  "endTimeMs" : 1719852095182
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "useMarkdownTextFunction" : true,
              "markdownTextPattern" : "### Markdown/HTML card\n - **Current entity**: ${entityName}.\n - **Current value**: ${Random}.",
              "markdownTextFunction" : "const devId=data[0].$datasource.entity.id.id\nconsole.log(devId)\nconst token = localStorage.getItem(\"jwt_token\");\nconst baseUrl = \"https://iot000.sonmar.com.ua\";\nconst deviceType = data[0].deviceType.toLowerCase().replace(/\\s+/g, '');\n\n// Новый запрос для списка rule chains\nvar ruleChainXhr = new XMLHttpRequest();\nvar ruleChainUrl = `${baseUrl}/api/ruleChains?pageSize=100&page=0&sortProperty=createdTime&sortOrder=DESC&type=CORE`;\n\nruleChainXhr.open(\"GET\", ruleChainUrl, false);\nruleChainXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\nruleChainXhr.send();\n\nvar ruleChain;\nif (ruleChainXhr.status === 200) {\n    var ruleChainResponse = JSON.parse(ruleChainXhr.responseText);\n    ruleChain = ruleChainResponse.data.find(rc => rc.name.toLowerCase().replace(/\\s+/g, '').includes(deviceType));\n    if (!ruleChain) {\n        return '<p>No matching rule chain found for device type.</p>';\n    }\n} else {\n    return '<p>Error fetching rule chains.</p>';\n}\n\n// Запрос телеметрии по найденному rule chain\nvar telemetryXhr = new XMLHttpRequest();\nvar telemetryUrl = `${baseUrl}/api/plugins/telemetry/RULE_CHAIN/${ruleChain.id.id}/values/attributes/SERVER_SCOPE`;\n\ntelemetryXhr.open(\"GET\", telemetryUrl, false);\ntelemetryXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\ntelemetryXhr.send();\n\nvar configAttributes, configTelemetry, prefixConfig;\nif (telemetryXhr.status === 200) {\n    var telemetryResponse = JSON.parse(telemetryXhr.responseText);\n    configAttributes = telemetryResponse.find(item => item.key === \"config_attributes\");\n    configTelemetry = telemetryResponse.find(item => item.key === \"config_telemetry\");\n    prefixConfig = telemetryResponse.find(item => item.key === \"prefix_config\");\n\n    if (!configAttributes || !configTelemetry || !prefixConfig) {\n        return '<p>Telemetry data missing.</p>';\n    }\n} else {\n    return '<p>Error fetching telemetry data.</p>';\n}\n\nvar attributesData = JSON.parse(configAttributes.value.replace(/'/g, '\"'));\nvar telemetryData = JSON.parse(configTelemetry.value.replace(/'/g, '\"'));\nvar prefixData = JSON.parse(prefixConfig.value.replace(/'/g, '\"'));\n\nvar uniqueKeys = [...new Set([\n    ...Object.keys(attributesData).filter(key => key !== \"config\"),\n    ...Object.keys(telemetryData).filter(key => key !== \"config\")\n])];\n\n// Step to get the related device ID before constructing configUrl\nvar relationXhr = new XMLHttpRequest();\nvar relationUrl = `${baseUrl}/api/relations/info?toId=${devId}&toType=DEVICE`;\n\nrelationXhr.open(\"GET\", relationUrl, false);\nrelationXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\nrelationXhr.send();\n\nvar relatedDeviceId;\nif (relationXhr.status === 200) {\n    var relationResponse = JSON.parse(relationXhr.responseText);\n    var relation = relationResponse.find(rel => rel.type === \"Created\");\n    if (relation) {\n        relatedDeviceId = relation.from.id;\n    } else {\n        return '<p>No related device found.</p>';\n    }\n} else {\n    return '<p>Error fetching relation data.</p>';\n}\n\n// Now use the relatedDeviceId to construct the configUrl\nvar configUrl = `${baseUrl}/api/plugins/telemetry/DEVICE/${relatedDeviceId}/values/attributes/CLIENT_SCOPE`;\n\nvar configXhr = new XMLHttpRequest();\nconfigXhr.open(\"GET\", configUrl, false);\nconfigXhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\nconfigXhr.send();\nconst addAttributes = (data, type, category, configItem) => {\n    let html = `<h4>${type.charAt(0).toUpperCase() + type.slice(1)}</h4>`;\n    data[category].forEach(attribute => {\n        const inputId = `config_${type}_${category}_${attribute}`;\n        let inputValue = '';\n\n        if (configItem && configItem.registers) {\n            const register = configItem.registers.find(reg => reg.key === attribute);\n            if (register) {\n                inputValue = register.register_id;\n            }\n        }\n\n        const prefixValue = prefixData[category] === 1 ? '✔️' : '❌';\n\n        html += `<div>${attribute}: <input type=\"text\" id=\"${inputId}\" value=\"${inputValue}\" data-prefix=\"${prefixValue}\" style=\"padding: 8px; margin: 5px 0; box-sizing: border-box; border: 1px solid #ccc; border-radius: 4px; width: calc(100% - 18px);\" /></div>`;\n    });\n    return html;\n};\n\nvar mainConfigData;\nif (configXhr.status === 200) {\n    var configResponse = JSON.parse(configXhr.responseText);\n    console.log(configResponse);\n    var mainConfig = configResponse.find(item => item.key === \"mainConfig\");\n    if (!mainConfig) {\n        return '<p>Main configuration data missing.</p>';\n    }\n    mainConfigData = mainConfig.value; // mainConfig.value уже массив объектов\n} else {\n    return '<p>Error fetching main configuration data.</p>';\n}\n\n// Начинаем создание таблицы с заголовком\nlet tableHTML = \n    `<h3>Device Configuration</h3>\n    <table id=\"deviceConfigTable\" style=\"border-collapse: collapse; width: 80%; margin: 20px auto; background-color: #fff; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\" border=\"1\">\n        <tr>\n            <th style=\"background-color: #007BFF; color: white; font-weight: bold; padding: 12px 15px; border: 1px солид #ddd; text-align: left;\">Category</th>\n            <th style=\"background-color: #007BFF; color: white; font-weight: bold; padding: 12px 15px; border: 1px солид #ddd; text-align: left;\">Prefix</th>\n            <th style=\"background-color: #007BFF; color: white; font-weight: bold; padding: 12px 15px; border: 1px солид #ddd; text-align: left;\">Connection ID</th>\n        </tr>`\n;\n\n// Цикл для добавления строк в таблицу\nuniqueKeys.forEach(category => {\n    const prefixStatus = prefixData[category] === 1 ? '✔️' : '❌';\n\n    const configItem = mainConfigData.find(item => item.title.toLowerCase().includes(category.toLowerCase()));\n    let connectionId = '';\n    if (configItem) {\n        connectionId = configItem.id;\n    }\n\n    // Создаем опции для выпадающего списка\n    let optionsHTML = '';\n    mainConfigData.forEach(item => {\n        optionsHTML += `<option value=\"${item.id}\" ${item.id === connectionId ? 'selected' : ''}>${item.id}</option>`;\n    });\n\n    // Формируем список атрибутов из config_telemetry и config_attributes с автозаполнением input\n    let attributesHTML = '';\n\n    if (telemetryData[category]) {\n        attributesHTML += addAttributes(telemetryData, 'telemetry', category, configItem);\n    }\n\n    if (attributesData[category]) {\n        attributesHTML += addAttributes(attributesData, 'attributes', category, configItem);\n    }\n\n    tableHTML += \n    `<div\n        <tr>\n            <td style=\"padding: 12px 15px; border: 1px солид #ddd; text-align: left;\">\n                <details>\n                    <summary style=\"cursor: pointer; font-weight: bold;\">${category}</summary>\n                    ${attributesHTML}\n                </details>\n            </td>\n            <td style=\"padding: 12px 15px; border: 1px solid #ddd; text-align: left;\">${prefixStatus}</td>\n            <td style=\"padding: 12px 15px; border: 1px солид #ddd; text-align: left;\">\n                <select id=\"${category}\" onchange=\"updateFields(event)\" style=\"padding: 8px; border: 1px солид #ccc; border-radius: 4px; width: 100%;\">\n                    ${optionsHTML}\n                </select>\n            </td>\n        </tr>\n        </div>`\n    ;\n});\n\n// Завершаем таблицу\n// Add this code at the end of your tableHTML construction\ntableHTML += `\n    </table>\n    <button id=\"actionButton\" style=\"display: block; margin: 20px auto; padding: 10px 20px; background-color: #007BFF; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n        Send Config\n    </button>\n`;\n// Обработчик события onChange для обновления полей\nwindow.updateFields = function(event) {\n    // Получаем элемент select, который вызвал событие\n    const selectElement = event.target;\n\n    // Извлекаем category из ID элемента select, убирая часть \"_connectionId\"\n    const category = selectElement.id.replace('_connectionId', '');\n\n    // Получаем выбранный ID из выпадающего списка\n    const selectedId = selectElement.value;\n\n    // Находим соответствующий configItem в mainConfigData\n    const configItem = mainConfigData.find(item => item.id === selectedId);\n\n    if (configItem) {\n        // Обновляем значения input для соответствующего configItem\n        configItem.registers.forEach(register => {\n            // Формируем ID input на основе категории и ключа атрибута\n            const inputId = `config_telemetry_${category}_${register.key}`;\n\n            // Получаем элемент input по ID\n            const inputElement = document.getElementById(inputId);\n\n            // Проверяем, что элемент существует, и обновляем его значение\n            if (inputElement) {\n                inputElement.value = register.register_id;\n            }\n        });\n    }\n};\n\n\n// Возвращаем итоговую HTML строку\nreturn tableHTML;\n\n\n\n",
              "applyDefaultMarkdownStyle" : true,
              "markdownCss" : "/* Стили */\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f9;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    flex-direction: column; /* Для вертикального центрирования содержимого */\n}\n\ntable {\n    border-collapse: collapse;\n    width: 80%;\n    margin: 20px auto;\n    background-color: #fff;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    border-spacing: 0;\n}\n\nth, td {\n    padding: 12px 15px;\n    border: 1px solid #ddd;\n    text-align: left;\n}\n\nth {\n    background-color: #007BFF;\n    color: white;\n    font-weight: bold;\n}\n\ntr:nth-child(even) {\n    background-color: #f9f9f9;\n}\n\ntr:hover {\n    background-color: #f1f1f1;\n}\n\ntd {\n    color: #333;\n}\n\ndetails {\n    margin: 10px 0;\n}\n\nsummary {\n    cursor: pointer;\n    font-weight: bold;\n}\n\ndetails[open] summary {\n    color: #007BFF;\n}\n\ninput[type=\"text\"] {\n    padding: 8px;\n    margin: 5px 0;\n    box-sizing: border-box;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    width: calc(100% - 18px);\n}\n\nbutton {\n    background-color: #007BFF;\n    color: white;\n    border: none;\n    padding: 10px 20px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    cursor: pointer;\n    border-radius: 4px;\n    transition: background-color 0.3s;\n}\n\nbutton:hover {\n    background-color: #0056b3;\n}\n\n.config-button {\n    margin-left: 10px;\n}\n\n.button-container {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    margin-top: 20px;\n}\n\n/* Поиск устройств */\n#deviceContainer {\n    position: relative;\n    width: 100%;\n}\n\n#deviceSearch,#ruleChainSearch {\n    margin-bottom: 10px;\n    padding: 10px;\n    width: calc(100% - 20px);\n    box-sizing: border-box;\n}\n\n\n#deviceList {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    right: 0;\n    max-height: 200px;\n    overflow-y: auto;\n    border: 1px solid #ddd;\n    background-color: #fff;\n    z-index: 1000;\n    list-style-type: none;\n    padding: 0;\n    margin: 0;\n}\n\n#deviceList li {\n    padding: 10px;\n    border-bottom: 1px solid #ddd;\n    cursor: pointer;\n}\n\n#deviceList li:hover {\n    background-color: #f1f1f1;\n}"
            },
            "title" : "Markdown/HTML Card",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ {
                "name" : "actionButton",
                "icon" : "search",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n\n// Retrieve related entity ID before using it\nentityRelationService.findInfoByTo({ entityType: 'DEVICE', id: entityId.id }).subscribe(\n    relations => {\n        // Find the relation with type \"Created\"\n        const createdRelation = relations.find(rel => rel.type === \"Created\");\n\n        if (createdRelation) {\n            // Extract the ID from the found relation\n            const relatedEntityId = createdRelation.from.id;\n\n            // Find all input elements on the page\n            const inputs = document.querySelectorAll('input[type=\"text\"]');\n            const values = {};\n            let allInputsValid = true; // Flag for checking validity of all inputs\n            let atLeastOneFilled = false; // Flag to check if at least one field is filled\n\n            // Forbidden characters for SQL injection prevention\n            const forbiddenCharacters = /['\"\\\\;%<>]/;\n\n            // Read values of all inputs and save them in an object\n            inputs.forEach(input => {\n                const value = input.value;\n                if (value && forbiddenCharacters.test(value)) {\n                    showNotification('Input contains forbidden characters.');\n                    allInputsValid = false;\n                    return;\n                }\n                if (value) {\n                    atLeastOneFilled = true;\n                }\n                const prefix = input.dataset.prefix;  // Get the prefix from data-prefix attribute\n                values[input.id] = { value, prefix };\n            });\n\n            // Stop execution if invalid inputs are found or no field is filled\n            if (!allInputsValid) {\n                return;\n            }\n\n            if (!atLeastOneFilled) {\n                showNotification('Please fill in at least one field.');\n                return;\n            }\n\n            // Helper to build the config structure\n            const buildConfigStructure = () => ({\n                attributes: { registers: {} },\n                telemetry: { registers: {} }\n            });\n\n            // Collect configuration\n            const config = buildConfigStructure();\n\n            Object.keys(values).forEach(key => {\n                const { value, prefix } = values[key];\n                if (value) {\n                    const parts = key.split('_');\n                    const configType = parts[1]; // attributes or telemetry\n                    const deviceType = parts[2]; // Extract the second part\n                    let attributeName = parts.slice(3).join('_'); // Combine remaining parts to get attributeName\n\n                    if (prefix === '✔️') {\n                        // If prefix is ✔️, include the deviceType in the attributeName (e.g., pump2_error_code)\n                        attributeName = `${deviceType}_${attributeName}`;\n                    }\n\n                    // Check if this attribute is already present and has a different prefix\n                    const existingEntry = config[configType].registers[attributeName];\n                    if (existingEntry) {\n                        // Compare prefixes and prioritize the one with ✔️\n                        if (prefix === '✔️' || (existingEntry.prefix !== '✔️' && prefix === '❌')) {\n                            config[configType].registers[attributeName] = { key: attributeName, register_id:value };\n                        }\n                    } else {\n                        // Add new entry\n                        config[configType].registers[attributeName] = { key: attributeName, register_id:value, prefix };\n                    }\n                }\n            });\n\n            // Convert the config registers from an object to an array\n            config.attributes.registers = Object.values(config.attributes.registers);\n            config.telemetry.registers = Object.values(config.telemetry.registers);\n\n            const finalConfig = {};\n            finalConfig[entityName] = config;\n\n            console.log('Final Config:', finalConfig);\n\n            // Get existing configFromTB\n            attributeService.getEntityAttributes({ entityType: 'DEVICE', id: relatedEntityId }, 'SHARED_SCOPE', ['configFromTB'])\n                .subscribe(\n                    response => {\n                        const configFromTB = response.find(item => item.key === 'configFromTB');\n                        let mergedConfig = {};\n\n                        if (configFromTB) {\n                            // Parse existing configFromTB if it exists\n                            mergedConfig = JSON.parse(configFromTB.value);\n                            if (mergedConfig[entityName]) {\n                                // If deviceName exists, replace its configuration\n                                mergedConfig[entityName] = finalConfig[entityName];\n                            } else {\n                                // If deviceName does not exist, add it to the configuration\n                                mergedConfig[entityName] = finalConfig[entityName];\n                            }\n                        } else {\n                            // If configFromTB does not exist, create a new config\n                            mergedConfig = finalConfig;\n                        }\n\n                        console.log('Updated Final Config:', mergedConfig);\n\n                        const attributes = [\n                            {\n                                key: 'configFromTB',\n                                value: JSON.stringify(mergedConfig)\n                            }\n                        ];\n\n                        attributeService.saveEntityAttributes(\n                            { entityType: 'DEVICE', id: relatedEntityId },\n                            'SHARED_SCOPE',\n                            attributes\n                        ).subscribe(\n                            response => {\n                                console.log('Attributes saved successfully', response);\n                                showNotification('Configuration has been updated');\n                            },\n                            error => {\n                                console.error('Error saving attributes', error);\n                                showNotification('Error saving attributes');\n                            }\n                        );\n                    },\n                    error => {\n                        console.error('Error fetching configFromTB', error);\n                        showNotification('Error fetching configFromTB');\n                    }\n                );\n        } else {\n            showNotification('No related entities found.');\n        }\n    },\n    error => {\n        console.error('Error fetching relations:', error);\n        showNotification('Error fetching relations.');\n    }\n);\n\n\n// Function to show a notification\nfunction showNotification(message) {\n    const notification = document.createElement('div');\n    notification.style.position = 'fixed';\n    notification.style.top = '50%';\n    notification.style.left = '50%';\n    notification.style.transform = 'translate(-50%, -50%)';\n    notification.style.padding = '20px';\n    notification.style.backgroundColor = '#4caf50';\n    notification.style.color = '#fff';\n    notification.style.fontSize = '18px';\n    notification.style.borderRadius = '8px';\n    notification.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';\n    notification.style.zIndex = '1000';\n    notification.textContent = message;\n\n    document.body.appendChild(notification);\n\n    setTimeout(() => {\n        document.body.removeChild(notification);\n    }, 3000);\n}\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "b2a1cd76-c4e6-2624-88d1-08f6e2ce66ff"
              }, {
                "name" : "deviceSearch",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "\n    // Получите значение введенное в текстовом поле\n    var searchValue = this.value.toUpperCase();\n\n    // Получите элемент select (ваш выпадающий список)\n    var select = document.getElementById('deviceDropdown');\n\n    // Получите все опции в списке\n    var options = select.getElementsByTagName('option');\n\n    // Переберите опции и скройте те, которые не соответствуют поисковому значению\n    var found = false; // Флаг для отслеживания наличия совпадений\n    for (var i = 0; i < options.length; i++) {\n        var option = options[i];\n        var txtValue = option.textContent || option.innerText;\n        if (searchValue === '' || txtValue.toUpperCase().indexOf(searchValue) > -1) {\n            option.style.display = '';\n            found = true; // Есть совпадение\n        } else {\n            option.style.display = 'none';\n        }\n    }\n\n    // Если не найдено совпадений, сбросьте выбор\n    if (!found) {\n        select.selectedIndex = -1;\n    }\n\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "5e327408-2f13-64d6-a438-a3c5e58280a6"
              }, {
                "name" : "config_attributes_category_button",
                "icon" : "search",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : " let $injector = widgetContext.$scope.$injector;\n        let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\n        // Функция для получения конфигурации устройства по id\n        function getConfig(deviceId) {\n            return new Promise((resolve, reject) => {\n                let xhr = new XMLHttpRequest();\n                let url = `https://iot000.sonmar.com.ua/api/plugins/telemetry/DEVICE/${deviceId}/values/attributes/CLIENT_SCOPE`;\n                let token = localStorage.getItem(\"jwt_token\");\n\n                xhr.open(\"GET\", url, true);\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n                xhr.onreadystatechange = function () {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status === 200) {\n                            try {\n                                let response = JSON.parse(xhr.responseText);\n                                resolve(response);\n                            } catch (e) {\n                                console.error(\"Invalid JSON response:\", xhr.responseText);\n                                reject(\"Error parsing JSON response.\");\n                            }\n                        } else {\n                            reject(\"Error fetching device config.\");\n                        }\n                    }\n                };\n                xhr.send();\n            });\n        }\n\n        // Функция для обработки клика по кнопке\n        async function handleButtonClick(event) {\n            const button = event.target;\n            const input = button.previousElementSibling;\n            const deviceSearchInput = document.getElementById('deviceSearch');\n            const deviceName = deviceSearchInput ? deviceSearchInput.value : '';\n            \n            if (input && input.id.includes('config')) {\n                console.log(\"config\")\n                let configId = input.value;\n                try {\n                    let configData = await getConfig('e15f7220-2f07-11ef-849b-699b159d4945'); // используем id устройства\n                    let mainConfig = configData.find(item => item.key === 'mainConfig');\n                    \n                    if (mainConfig) {\n                        let configValue = mainConfig.value;\n                        if (typeof configValue === 'string') {\n                            try {\n                                configValue = JSON.parse(configValue);\n                            } catch (e) {\n                                console.error(\"Invalid JSON in mainConfig value:\", mainConfig.value);\n                                return;\n                            }\n                        }\n\n                        let config = configValue.find(c => c.id === configId);\n                        if (config) {\n                            config.registers.forEach(register => {\n                                // Найти все input элементы, id которых начинается с \"config_attributes\" и содержит register.key\n                                let regInputElements = document.querySelectorAll(`input[id^=\"config_attributes\"][id*=\"${register.key}\"]`);\n                                regInputElements.forEach(regInput => {\n                                    regInput.value = register.key;\n                                    console.log(`Setting value for input with key ${register.key}`);\n                                });\n                            });\n                        } else {\n                            console.warn(`Config not found for id: ${configId}`);\n                        }\n                    } else {\n                        console.warn('mainConfig not found in device config data');\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\nhandleButtonClick($event);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "6db3bea2-c770-27ab-a056-203cbabee487"
              }, {
                "name" : "config_telemetry_category_button",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\n        let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\n        // Функция для получения конфигурации устройства по id\n        function getConfig(deviceId) {\n            return new Promise((resolve, reject) => {\n                let xhr = new XMLHttpRequest();\n                let url = `https://iot000.sonmar.com.ua/api/plugins/telemetry/DEVICE/${deviceId}/values/attributes/CLIENT_SCOPE`;\n                let token = localStorage.getItem(\"jwt_token\");\n\n                xhr.open(\"GET\", url, true);\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n                xhr.onreadystatechange = function () {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status === 200) {\n                            try {\n                                let response = JSON.parse(xhr.responseText);\n                                resolve(response);\n                            } catch (e) {\n                                console.error(\"Invalid JSON response:\", xhr.responseText);\n                                reject(\"Error parsing JSON response.\");\n                            }\n                        } else {\n                            reject(\"Error fetching device config.\");\n                        }\n                    }\n                };\n                xhr.send();\n            });\n        }\n\n        // Функция для обработки клика по кнопке\n        async function handleButtonClick(event) {\n            const button = event.target;\n            const input = button.previousElementSibling;\n            const deviceSearchInput = document.getElementById('deviceSearch');\n            const deviceName = deviceSearchInput ? deviceSearchInput.value : '';\n            \n            if (input && input.id.includes('config')) {\n                console.log(\"config\")\n                let configId = input.value;\n                try {\n                    let configData = await getConfig('e15f7220-2f07-11ef-849b-699b159d4945'); // используем id устройства\n                    let mainConfig = configData.find(item => item.key === 'mainConfig');\n                    \n                    if (mainConfig) {\n                        let configValue = mainConfig.value;\n                        if (typeof configValue === 'string') {\n                            try {\n                                configValue = JSON.parse(configValue);\n                            } catch (e) {\n                                console.error(\"Invalid JSON in mainConfig value:\", mainConfig.value);\n                                return;\n                            }\n                        }\n\n                        let config = configValue.find(c => c.id === configId);\n                        if (config) {\n                            config.registers.forEach(register => {\n                                // Найти все input элементы, id которых начинается с \"config_attributes\" и содержит register.key\n                                let regInputElements = document.querySelectorAll(`input[id^=\"config_telemetry\"][id*=\"${register.key}\"]`);\n                                regInputElements.forEach(regInput => {\n                                    regInput.value = register.key;\n                                    console.log(`Setting value for input with key ${register.key}`);\n                                });\n                            });\n                        } else {\n                            console.warn(`Config not found for id: ${configId}`);\n                        }\n                    } else {\n                        console.warn('mainConfig not found in device config data');\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\nhandleButtonClick($event);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "936b1953-24d2-56ed-277e-4d9938205ac5"
              }, {
                "name" : "clearInputsButton",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "const inputs = document.querySelectorAll('input[type=\"text\"]');\ninputs.forEach(input => {\n    if (input.id !== 'rateInput') {\n        input.value = '';\n    }\n});\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "7efbeb18-f3ba-f8b1-f3ec-e7e0c313e053"
              }, {
                "name" : "deleteDeviceButton",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "    let $injector = widgetContext.$scope.$injector;\n    let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\n    // Получить значение deviceSearch\n    const deviceSearchElement = document.getElementById('deviceSearch');\n    let deviceName = deviceSearchElement ? deviceSearchElement.value : '';\n    if (!deviceName) {\n        showNotification('Please enter a device name.');\n        return;\n    }\n\n    // Получить существующий configFromTB\n    attributeService.getEntityAttributes({ entityType: 'DEVICE', id: entityId.id }, 'SHARED_SCOPE', ['configFromTB'])\n        .subscribe(\n            response => {\n                const configFromTB = response.find(item => item.key === 'configFromTB');\n                if (!configFromTB) {\n                    showNotification('Config not found.');\n                    return;\n                }\n\n                let mergedConfig = JSON.parse(configFromTB.value);\n\n                // Проверить, существует ли устройство с данным именем\n                if (!mergedConfig[deviceName]) {\n                    showNotification(`Device \"${deviceName}\" not found in the configuration.`);\n                    return;\n                }\n\n                // Удалить устройство из конфигурации\n                delete mergedConfig[deviceName];\n\n                // Сохранить обновленную конфигурацию\n                const attributes = [\n                    {\n                        key: 'configFromTB',\n                        value: JSON.stringify(mergedConfig)\n                    }\n                ];\n\n                attributeService.saveEntityAttributes(\n                    { entityType: 'DEVICE', id: entityId.id },\n                    'SHARED_SCOPE',\n                    attributes\n                ).subscribe(\n                    response => {\n                        console.log('Attributes saved successfully', response);\n                        showNotification(`Device \"${deviceName}\" has been deleted successfully.`);\n                    },\n                    error => {\n                        console.error('Error saving attributes', error);\n                        showNotification('Error saving attributes.');\n                    }\n                );\n            },\n            error => {\n                console.error('Error fetching configFromTB', error);\n                showNotification('Error fetching configFromTB.');\n            }\n        );\n\n    // Функция для отображения уведомления\n    function showNotification(message) {\n        const notification = document.createElement('div');\n        notification.style.position = 'fixed';\n        notification.style.top = '50%';\n        notification.style.left = '50%';\n        notification.style.transform = 'translate(-50%, -50%)';\n        notification.style.padding = '20px';\n        notification.style.backgroundColor = '#4caf50';\n        notification.style.color = '#fff';\n        notification.style.fontSize = '18px';\n        notification.style.borderRadius = '8px';\n        notification.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';\n        notification.style.zIndex = '1000';\n        notification.textContent = message;\n\n        document.body.appendChild(notification);\n\n        setTimeout(() => {\n            document.body.removeChild(notification);\n        }, 3000);\n    }\n\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "4b5c5134-2ea2-0762-631e-747cbc65dc83"
              } ]
            },
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1075,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "9541ffbd-b5c0-644d-57b6-151c8e8d13ed"
        },
        "dbfe0ccc-04ed-cafd-4340-2b8f7d05a58a" : {
          "type" : "static",
          "sizeX" : 4,
          "sizeY" : 1,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0",
            "settings" : {
              "cardHtml" : "<div class='card'>\n    <div class='content' id=\"back\">\n        <div class='description' id=\"back\">\n            Back\n        </div>\n    </div>\n</div>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 5px;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   justify-content: center;\n   height: 100%;\n   box-sizing: border-box;\n   transition: background-color 0.5s;\n}\n\n.card .content:hover {\n    background-color: #ddd;\n}\n\n.card .description {\n    font-size: 0.75em;\n    font-weight: normal;\n    line-height: 2;\n    color: #333333;\n    text-transform: uppercase;\n}\n"
            },
            "title" : "Navigation:  Analytics",
            "dropShadow" : false,
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableFullscreen" : false,
            "enableDataExport" : true,
            "widgetStyle" : {
              "border" : "1px solid #E0E0E0"
            },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ {
                "name" : "back",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "let stateIndex = widgetContext.stateController.getStateIndex();\nif (stateIndex > 0) {\n    stateIndex -= 1;\n    backToPrevState(stateIndex);\n}\n\nfunction backToPrevState(stateIndex) {\n    widgetContext.stateController.navigatePrevState(stateIndex);\n}\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "b5eba137-4ca4-ec3d-f9a0-8b59e2d98207"
              } ]
            }
          },
          "id" : "dbfe0ccc-04ed-cafd-4340-2b8f7d05a58a",
          "typeFullFqn" : "system.cards.html_card"
        },
        "3778c880-c367-d979-f920-0b29ff53d9de" : {
          "type" : "static",
          "sizeX" : 4,
          "sizeY" : 1,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0",
            "settings" : {
              "cardHtml" : "<div class='card'>\n    <div class='content' id=\"main\">\n        <div class='description' id=\"main\">\n            Main\n        </div>\n    </div>\n</div>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 5px;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   justify-content: center;\n   height: 100%;\n   box-sizing: border-box;\n   transition: background-color 0.5s;\n}\n\n.card .content:hover {\n    background-color: #ddd;\n}\n\n.card .description {\n    font-size: 0.75em;\n    font-weight: normal;\n    line-height: 2;\n    color: #333333;\n    text-transform: uppercase;\n}\n"
            },
            "title" : "Navigation:  Analytics",
            "dropShadow" : false,
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableFullscreen" : false,
            "enableDataExport" : true,
            "widgetStyle" : {
              "border" : "1px solid #E0E0E0"
            },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ {
                "name" : "main",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "default",
                "setEntityId" : false,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "b5eba137-4ca4-ec3d-f9a0-8b59e2d98207"
              } ]
            }
          },
          "id" : "3778c880-c367-d979-f920-0b29ff53d9de",
          "typeFullFqn" : "system.cards.html_card"
        },
        "8b7a3d19-8d2c-c03c-95f0-aefd9adadf50" : {
          "type" : "static",
          "sizeX" : 4,
          "sizeY" : 1,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0",
            "settings" : {
              "cardHtml" : "<div class='card'>\n    <div class='content' id=\"main\">\n        <div class='description' id=\"main\">\n            Back\n        </div>\n    </div>\n</div>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 5px;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   justify-content: center;\n   height: 100%;\n   box-sizing: border-box;\n   transition: background-color 0.5s;\n}\n\n.card .content:hover {\n    background-color: #ddd;\n}\n\n.card .description {\n    font-size: 0.75em;\n    font-weight: normal;\n    line-height: 2;\n    color: #333333;\n    text-transform: uppercase;\n}\n"
            },
            "title" : "Navigation:  Analytics",
            "dropShadow" : false,
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableFullscreen" : false,
            "enableDataExport" : true,
            "widgetStyle" : {
              "border" : "1px solid #E0E0E0"
            },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ {
                "name" : "main",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "let stateIndex = widgetContext.stateController.getStateIndex();\nif (stateIndex > 0) {\n    stateIndex -= 1;\n    backToPrevState(stateIndex);\n}\n\nfunction backToPrevState(stateIndex) {\n    widgetContext.stateController.navigatePrevState(stateIndex);\n}\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "b5eba137-4ca4-ec3d-f9a0-8b59e2d98207"
              } ]
            }
          },
          "id" : "8b7a3d19-8d2c-c03c-95f0-aefd9adadf50",
          "typeFullFqn" : "system.cards.html_card"
        }
      },
      "states" : {
        "default" : {
          "name" : "correlateAtr",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "7c175a1d-c7fe-17ca-e394-06ab0712288f" : {
                  "sizeX" : 15,
                  "sizeY" : 9,
                  "row" : 0,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        },
        "specgate" : {
          "name" : "specGate",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "23568f66-1d74-3497-8195-16acbfcb0092" : {
                  "sizeX" : 9,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 0
                },
                "af4f2a0d-c0dc-7c7b-4c1c-78a35ec23fdb" : {
                  "sizeX" : 7,
                  "sizeY" : 5,
                  "row" : 0,
                  "col" : 17
                },
                "032766de-da4a-744f-5dca-21dcac69f59f" : {
                  "sizeX" : 17,
                  "sizeY" : 9,
                  "row" : 2,
                  "col" : 0
                },
                "441ee506-3beb-7745-47af-e35f3c80ac97" : {
                  "sizeX" : 7,
                  "sizeY" : 5,
                  "row" : 6,
                  "col" : 17
                },
                "8b7a3d19-8d2c-c03c-95f0-aefd9adadf50" : {
                  "sizeX" : 3,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 9
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        },
        "settings_device" : {
          "name" : "Settings_device",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "88efba94-da76-6fa4-1733-ccd796aa49f7" : {
                  "sizeX" : 12,
                  "sizeY" : 7,
                  "row" : 2,
                  "col" : 0
                },
                "9541ffbd-b5c0-644d-57b6-151c8e8d13ed" : {
                  "sizeX" : 12,
                  "sizeY" : 14,
                  "row" : 0,
                  "col" : 12
                },
                "dbfe0ccc-04ed-cafd-4340-2b8f7d05a58a" : {
                  "sizeX" : 3,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 0
                },
                "3778c880-c367-d979-f920-0b29ff53d9de" : {
                  "sizeX" : 3,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 3
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        }
      },
      "entityAliases" : {
        "17312e58-9903-dc10-d897-5bd197a00745" : {
          "id" : "17312e58-9903-dc10-d897-5bd197a00745",
          "alias" : "tableGateway",
          "filter" : {
            "type" : "entitiesByGroupName",
            "resolveMultiple" : true,
            "groupStateEntity" : false,
            "stateEntityParamName" : null,
            "groupType" : "DEVICE",
            "entityGroupNameFilter" : "gateway"
          }
        },
        "848a675a-5517-9e39-5502-a565be585eab" : {
          "id" : "848a675a-5517-9e39-5502-a565be585eab",
          "alias" : "depend",
          "filter" : {
            "type" : "stateEntity",
            "resolveMultiple" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null
          }
        },
        "69112ed9-7728-f943-65a2-cfefd3b8ef2c" : {
          "id" : "69112ed9-7728-f943-65a2-cfefd3b8ef2c",
          "alias" : "allDevises",
          "filter" : {
            "type" : "entitiesByGroupName",
            "resolveMultiple" : true,
            "groupStateEntity" : false,
            "stateEntityParamName" : null,
            "groupType" : "DEVICE",
            "entityGroupNameFilter" : "All"
          }
        },
        "eccbc4ee-907e-e166-2c78-7dd4fa5a9e07" : {
          "id" : "eccbc4ee-907e-e166-2c78-7dd4fa5a9e07",
          "alias" : "created",
          "filter" : {
            "type" : "relationsQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null,
            "rootEntity" : null,
            "direction" : "FROM",
            "maxLevel" : 1,
            "fetchLastLevelOnly" : false,
            "filters" : [ {
              "relationType" : "Created",
              "entityTypes" : [ "DEVICE" ]
            } ]
          }
        },
        "7c77b59e-d563-6fa1-fc1e-2a99a23f11a9" : {
          "id" : "7c77b59e-d563-6fa1-fc1e-2a99a23f11a9",
          "alias" : "Device'sGateway",
          "filter" : {
            "type" : "relationsQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null,
            "rootEntity" : null,
            "direction" : "TO",
            "maxLevel" : 1,
            "fetchLastLevelOnly" : false,
            "filters" : [ {
              "relationType" : "Created",
              "entityTypes" : [ ]
            } ]
          }
        }
      },
      "filters" : { },
      "timewindow" : {
        "displayValue" : "",
        "hideInterval" : false,
        "hideLastInterval" : false,
        "hideQuickInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1719590793288,
            "endTimeMs" : 1719677193288
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "customerId" : null,
    "externalId" : {
      "entityType" : "DASHBOARD",
      "id" : "8d9dc840-3631-11ef-849b-699b159d4945"
    },
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "8d9dc840-3631-11ef-849b-699b159d4945"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "correlateAtr",
    "ownerId" : null,
    "title" : "correlateAtr"
  },
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}